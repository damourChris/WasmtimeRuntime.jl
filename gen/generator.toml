# Wasmtime Julia Binding Generator Configuration
# Controls C-to-Julia binding generation for Wasmtime runtime

[general]
# Library name for ccall expressions
library_name = "libwasmtime"

# this entry allows you to specify different library names for different headers.
# in the following example:
# library_names = {"config.h" = "libclang_config", "libclang_p.*.h" = "libclang_patch"}
# those functions in the `config.h` will be generated as:
# ccall((function_name, libclang_config), returntype, (argtype1, ...), argvalue1, ...)
library_names = {}

# Output path for generated module
output_file_path = "../src/LibWasmtime.jl"

# if this entry is not empty, the generator will print the code below to the `output_file_path`.
# module module_name
#
# end # module
module_name = "LibWasmtime"

# if this entry is not empty, the generator will print the code below to the `output_file_path`.
# using jll_pkg_name
# export jll_pkg_name
jll_pkg_name = ""

# for packages that have extra JLL package dependencies
jll_pkg_extra = []

# Symbol prefixes for automatic export
export_symbol_prefixes = [
  "libwasm",
  "wasmtime_",
  "wasm_",
  "WASM_",
  "WASMTIME_",
  "wasi_",
]

# the code in the following file will be copy-pasted to `output_file_path` before the generated code.
# this is often used for applying custom patches, e.g. adding missing definitions.
prologue_file_path = "./prologue.jl"

# the code in the following file will be copy-pasted to `output_file_path` after the generated code.
# this is often used for applying custom patches.
epilogue_file_path = "./epilogue.jl"

# node with an id in the `printer_blacklist` will be ignored in the printing passes.
# this is very useful for custom editing.
printer_blacklist = []

# Julia's `@enum` do not allow duplicated values, so by default, C enums are translated to
# CEnum.jl's `@cenum`.
# if this entry is true, `@enum` is used and those duplicated enum constants are just commented.
use_julia_native_enum_type = false

# Include CEnum import in generated code
# Set to false if CEnum is available in the module environment
print_using_CEnum = true

# Use deterministic symbols instead of gensym-generated names `var"##XXX`
# Improves readability and reproducibility of generated code
use_deterministic_symbol = true

# Process only local headers, not system headers
# System headers are processed only when necessary for dependencies
# Set to false if need to generate  all symbols in sys headers
is_local_header_only = true

# =============================================================================
# Struct Generation Preferences
# =============================================================================

# Generate clean struct names for typedef struct patterns
# When true: typedef struct { int x; } my_struct; → struct my_struct ... end
# When false: generates intermediate tag types with const aliases
# ```
smart_de_anonymize = true

# EXPERIMENTAL
# if this option is set to true, those structs that are not necessary to be an
# immutable struct will be generated as a mutable struct.
# this option is default to false, do read the paragraph below before using this feature.
auto_mutability = true

# Add default constructors for mutable structs: Foo() = new()
auto_mutability_with_new = false

# =============================================================================
# Struct Mutability Control
# =============================================================================

# Structs that should NOT be generated as mutable
# Important for types used in Vector operations where inline storage is required
# Example: Vector{wasmtime_val} requires immutable struct for proper memory layout
auto_mutability_blacklist = [
  "wasmtime_val",  # Critical for Vector operations in Wasmtime API
]

# Structs that SHOULD be generated as mutable (overrides blacklist)
# Higher priority than blacklist - useful for exceptions to general rules
auto_mutability_whitelist = [
  "__JL_Ctag_4",           # Internal tag type
  "wasm_byte_vec_t",       # Byte vector operations
  "wasm_valtype_vec_t",    # Value type vectors
  "wasm_functype_vec_t",   # Function type vectors
  "wasm_globaltype_vec_t", # Global type vectors
  "wasm_tabletype_vec_t",  # Table type vectors
  "wasm_memorytype_vec_t", # Memory type vectors
  "wasm_externtype_vec_t", # External type vectors
  "wasm_importtype_vec_t", # Import type vectors
  "wasm_exporttype_vec_t", # Export type vectors
  "wasm_val_vec_t",        # Value vectors
  "wasm_frame_vec_t",      # Frame vectors
  "wasm_extern_vec_t",     # External vectors
]

# =============================================================================
# Code Generation Options
# =============================================================================

[codegen]
# Map C bool to Julia Bool instead of UInt8/Cuchar
# -> Provides better type safety and idiomatic Julia code
use_julia_bool = true

# Assume all C string parameters expect NUL termination
# Ensures proper string handling for C API calls
# TODO: support filtering
always_NUL_terminated_string = true

# generate strictly typed function
is_function_strictly_typed = false

# if true, opaque pointers in function arguments will be translated to `Ptr{Cvoid}`.
opaque_func_arg_as_PtrCvoid = false

# if true, opaque types are translated to `mutable struct` instead of `Cvoid`.
opaque_as_mutable_struct = true

# if true, use Julia 1.5's new `@ccall` macro
use_ccall_macro = false

# generate getproperty/setproperty! methods for the types in the following list
field_access_method_list = []

# the generator will prefix the function argument names in the following list with a "_" to
# prevent the generated symbols from conflicting with the symbols defined and exported in Base.
function_argument_conflict_symbols = []

[codegen.macro]
# it‘s highly recommended to set this entry to "basic".
# if you'd like to skip all of the macros, please set this entry to "disable".
# if you'd like to translate function-like macros to Julia, please set this entry to "aggressive".
macro_mode = "basic"

# Function-like macros to always translate (even in basic mode)
functionlike_macro_whitelist = [
    "CINDEX_VERSION_ENCODE",  # Version encoding utility
]

# Add comments for skipped macros in generated output
# Helpful for debugging and understanding what was skipped
add_comment_for_skipped_macro = true

# Ignore header guard macros (macros ending in "_H")
# Reduces noise in generated output
ignore_header_guards = true

# Additional suffixes for header guard detection
# Macros ending with these suffixes will also be ignored
ignore_header_guards_with_suffixes = []

# Ignore pure definition macros without values
# Skips macros like: #define SOME_FEATURE
ignore_pure_definition = true
