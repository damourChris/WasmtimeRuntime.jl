var documenterSearchIndex = {"docs":
[{"location":"30-modules/#WebAssembly-Modules","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"WebAssembly modules are the fundamental unit of code in WebAssembly. This guide covers module creation, validation, introspection, and management.","category":"page"},{"location":"30-modules/#Module-Basics","page":"WebAssembly Modules","title":"Module Basics","text":"","category":"section"},{"location":"30-modules/#Creating-Modules","page":"WebAssembly Modules","title":"Creating Modules","text":"","category":"section"},{"location":"30-modules/#From-Bytes","page":"WebAssembly Modules","title":"From Bytes","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Read WebAssembly binary\nwasm_bytes = read(\"module.wasm\")\nmodule_obj = WasmModule(engine, wasm_bytes)","category":"page"},{"location":"30-modules/#From-WebAssembly-Text-(WAT)-(-Working-Feature)","page":"WebAssembly Modules","title":"From WebAssembly Text (WAT) (✅ Working Feature)","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# WAT to WASM conversion is implemented and working\nwat_content = \"\"\"\n(module\n  (func $add (param $x i32) (param $y i32) (result i32)\n    local.get $x\n    local.get $y\n    i32.add)\n  (export \"add\" (func $add)))\n\"\"\"\n\n# Convert WAT to WASM bytes\nwasm_bytes = wat2wasm(wat_content)\nmodule_obj = WasmModule(engine, wasm_bytes)","category":"page"},{"location":"30-modules/#From-File-Path-(File-Reading)","page":"WebAssembly Modules","title":"From File Path (File Reading)","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Read file and create module\nwasm_bytes = read(\"path/to/module.wasm\")\nmodule_obj = WasmModule(engine, wasm_bytes)","category":"page"},{"location":"30-modules/#Module-Properties","page":"WebAssembly Modules","title":"Module Properties","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"module_obj = WasmModule(engine, wasm_bytes)\n\n# Check validity\nisvalid(module_obj)  # Returns true if module is valid\n\n# Access underlying engine\nmodule_obj.engine === engine  # true","category":"page"},{"location":"30-modules/#Module-Validation","page":"WebAssembly Modules","title":"Module Validation","text":"","category":"section"},{"location":"30-modules/#Validating-WebAssembly-Bytes","page":"WebAssembly Modules","title":"Validating WebAssembly Bytes","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Before creating a module, validate the WebAssembly bytes:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"engine = WasmEngine()\nwasm_bytes = read(\"module.wasm\")\n\n# Validate before creating module\nif validate(engine, wasm_bytes)\n    module_obj = WasmModule(engine, wasm_bytes)\n    println(\"Module is valid!\")\nelse\n    println(\"Invalid WebAssembly bytes\")\nend","category":"page"},{"location":"30-modules/#Validation-Behavior","page":"WebAssembly Modules","title":"Validation Behavior","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Valid empty module\nempty_wasm = UInt8[0x00, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00]\nvalidate(engine, empty_wasm)  # true\n\n# Invalid bytes\ninvalid_wasm = UInt8[0x00, 0x00, 0x00, 0x00]\nvalidate(engine, invalid_wasm)  # false\n\n# Empty bytes\nvalidate(engine, UInt8[])  # false","category":"page"},{"location":"30-modules/#Module-Introspection","page":"WebAssembly Modules","title":"Module Introspection","text":"","category":"section"},{"location":"30-modules/#Exports-(-Partial-Implementation)","page":"WebAssembly Modules","title":"Exports (🚧 Partial Implementation)","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Query what the module exports:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"module_obj = WasmModule(engine, wasm_bytes)\nmodule_exports = exports(module_obj)\n\n# Currently returns Dict{String, Any}() - placeholder data\n# Full export introspection planned for future release","category":"page"},{"location":"30-modules/#Imports-(-Partial-Implementation)","page":"WebAssembly Modules","title":"Imports (🚧 Partial Implementation)","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Query what the module requires as imports:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"module_imports = imports(module_obj)\n\n# Currently returns Dict{String, Any}() - placeholder data\n# Full import introspection planned for future release","category":"page"},{"location":"30-modules/#Module-Structure-(-Limited)","page":"WebAssembly Modules","title":"Module Structure (🚧 Limited)","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Basic module information (returns placeholder data)\nprintln(\"Module exports: \", length(exports(module_obj)))  # Currently 0\nprintln(\"Module imports: \", length(imports(module_obj)))  # Currently 0","category":"page"},{"location":"30-modules/#Module-Lifecycle","page":"WebAssembly Modules","title":"Module Lifecycle","text":"","category":"section"},{"location":"30-modules/#Creation-and-Memory-Management","page":"WebAssembly Modules","title":"Creation and Memory Management","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Modules are automatically memory-managed:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"function create_module()\n    engine = WasmEngine()\n    wasm_bytes = read(\"module.wasm\")\n    return WasmModule(engine, wasm_bytes)\nend\n\nmodule_obj = create_module()\n# Module and engine are cleaned up when GC'd","category":"page"},{"location":"30-modules/#Module-Reuse","page":"WebAssembly Modules","title":"Module Reuse","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Modules can be instantiated multiple times:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"engine = WasmEngine()\nmodule_obj = WasmModule(engine, wasm_bytes)\n\n# Create multiple instances\nstore1 = WasmStore(engine)\nstore2 = WasmStore(engine)\n\ninstance1 = Instance(store1, module_obj)\ninstance2 = Instance(store2, module_obj)\n\n# Each instance has separate state","category":"page"},{"location":"30-modules/#Sharing-Across-Engines","page":"WebAssembly Modules","title":"Sharing Across Engines","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Modules are tied to their engine:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"engine1 = Engine()\nengine2 = Engine()\n\nmodule_obj = WasmModule(engine1, wasm_bytes)\n\n# This works - same engine\nstore1 = Store(engine1)\ninstance1 = Instance(store1, module_obj)\n\n# This would fail - different engine\nstore2 = Store(engine2)\n# instance2 = Instance(store2, module_obj)  # Error!","category":"page"},{"location":"30-modules/#Error-Handling","page":"WebAssembly Modules","title":"Error Handling","text":"","category":"section"},{"location":"30-modules/#Module-Creation-Errors","page":"WebAssembly Modules","title":"Module Creation Errors","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"try\n    # Invalid WebAssembly bytes\n    invalid_bytes = UInt8[0x00, 0x00, 0x00, 0x00]\n    module_obj = WasmModule(engine, invalid_bytes)\ncatch e::WasmtimeError\n    println(\"Failed to create module: $(e.message)\")\nend","category":"page"},{"location":"30-modules/#File-System-Errors","page":"WebAssembly Modules","title":"File System Errors","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"try\n    # Non-existent file\n    module_obj = WasmModule(engine, \"nonexistent.wasm\")\ncatch e::SystemError\n    println(\"File not found: $(e.msg)\")\nend\n\ntry\n    # File with invalid content\n    module_obj = WasmModule(engine, \"invalid_file.txt\")\ncatch e::WasmtimeError\n    println(\"Invalid WebAssembly content: $(e.message)\")\nend","category":"page"},{"location":"30-modules/#Validation-Errors","page":"WebAssembly Modules","title":"Validation Errors","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Safe module creation with validation\nfunction safe_create_module(engine, bytes_or_path)\n    try\n        if isa(bytes_or_path, String)\n            # File path\n            bytes = read(bytes_or_path)\n        else\n            # Byte array\n            bytes = bytes_or_path\n        end\n\n        if !validate(engine, bytes)\n            throw(WasmtimeError(\"Invalid WebAssembly module\"))\n        end\n\n        return WasmModule(engine, bytes)\n    catch e\n        rethrow(e)\n    end\nend","category":"page"},{"location":"30-modules/#Advanced-Module-Operations","page":"WebAssembly Modules","title":"Advanced Module Operations","text":"","category":"section"},{"location":"30-modules/#Module-Compilation-Performance","page":"WebAssembly Modules","title":"Module Compilation Performance","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# For better performance, reuse engines\nengine = Engine(Config(optimization_level = SpeedAndSize))\n\n# Compile multiple modules with the same engine\nmodules = []\nfor wasm_file in [\"module1.wasm\", \"module2.wasm\", \"module3.wasm\"]\n    push!(modules, WasmModule(engine, wasm_file))\nend","category":"page"},{"location":"30-modules/#Module-Caching-Pattern","page":"WebAssembly Modules","title":"Module Caching Pattern","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Simple module cache\nmodule_cache = Dict{String, WasmModule}()\n\nfunction get_module(engine, file_path)\n    if haskey(module_cache, file_path)\n        return module_cache[file_path]\n    else\n        module_obj = WasmModule(engine, file_path)\n        module_cache[file_path] = module_obj\n        return module_obj\n    end\nend","category":"page"},{"location":"30-modules/#Batch-Module-Processing","page":"WebAssembly Modules","title":"Batch Module Processing","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"function process_modules(engine, wasm_files)\n    results = []\n\n    for file in wasm_files\n        try\n            # Validate first\n            bytes = read(file)\n            if validate(engine, bytes)\n                module_obj = WasmModule(engine, bytes)\n                push!(results, (file, module_obj, :success))\n            else\n                push!(results, (file, nothing, :invalid))\n            end\n        catch e\n            push!(results, (file, nothing, :error))\n        end\n    end\n\n    return results\nend","category":"page"},{"location":"30-modules/#WAT-to-WASM-Conversion-(Future)","page":"WebAssembly Modules","title":"WAT to WASM Conversion (Future)","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"The wat_to_wasm function is planned but not yet implemented:","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"# Placeholder implementation\nfunction convert_wat_when_available()\n    wat_content = \"\"\"\n    (module\n      (func $hello (result i32)\n        i32.const 42)\n      (export \"hello\" (func $hello)))\n    \"\"\"\n\n    try\n        wasm_bytes = wat_to_wasm(wat_content)\n        return WasmModule(engine, wasm_bytes)\n    catch e::WasmtimeError\n        if occursin(\"not yet implemented\", e.message)\n            println(\"WAT conversion not available yet\")\n            return nothing\n        else\n            rethrow(e)\n        end\n    end\nend","category":"page"},{"location":"30-modules/#Best-Practices","page":"WebAssembly Modules","title":"Best Practices","text":"","category":"section"},{"location":"30-modules/#Module-Creation","page":"WebAssembly Modules","title":"Module Creation","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Validate before creating: Always validate WebAssembly bytes\nReuse engines: Share engines across multiple modules\nHandle errors gracefully: Wrap module creation in try-catch\nCache compiled modules: Avoid recompiling the same module","category":"page"},{"location":"30-modules/#Performance","page":"WebAssembly Modules","title":"Performance","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Use appropriate optimization: Configure engine optimization level\nMinimize module recreation: Reuse modules when possible\nBatch operations: Process multiple modules efficiently","category":"page"},{"location":"30-modules/#Error-Recovery","page":"WebAssembly Modules","title":"Error Recovery","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"function robust_module_creation(engine, source)\n    # Try different creation methods\n    if isa(source, String) && isfile(source)\n        try\n            return WasmModule(engine, source)\n        catch e\n            @warn \"Failed to load from file: $source\" exception=e\n        end\n    end\n\n    if isa(source, Vector{UInt8})\n        if validate(engine, source)\n            try\n                return WasmModule(engine, source)\n            catch e\n                @warn \"Failed to create from bytes\" exception=e\n            end\n        else\n            @warn \"Invalid WebAssembly bytes\"\n        end\n    end\n\n    return nothing\nend","category":"page"},{"location":"30-modules/#Debugging-Modules","page":"WebAssembly Modules","title":"Debugging Modules","text":"","category":"section"},{"location":"30-modules/#Module-Inspection","page":"WebAssembly Modules","title":"Module Inspection","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"function inspect_module(module_obj)\n    println(\"Module validity: \", isvalid(module_obj))\n    println(\"Module pointer: \", module_obj.ptr)\n    println(\"Engine pointer: \", module_obj.engine.ptr)\n\n    # Introspection (when implemented)\n    exports_info = exports(module_obj)\n    imports_info = imports(module_obj)\n\n    println(\"Exports count: \", length(exports_info))\n    println(\"Imports count: \", length(imports_info))\nend","category":"page"},{"location":"30-modules/#Common-Issues","page":"WebAssembly Modules","title":"Common Issues","text":"","category":"section"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"Module creation fails: Check WebAssembly bytes validity\nEngine mismatch: Ensure module and store use same engine\nFile not found: Verify file paths and permissions\nMemory issues: Monitor module lifecycle and cleanup","category":"page"},{"location":"30-modules/","page":"WebAssembly Modules","title":"WebAssembly Modules","text":"The module system provides a robust foundation for WebAssembly execution while maintaining Julia's ease of use and safety guarantees.","category":"page"},{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/damourChris/WasmtimeRuntime.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/damourChris/WasmtimeRuntime.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a PR to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/damourChris/WasmtimeRuntime.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"<!– - After that runs, the stable docs should be updated. Check them and look for the version number. –>","category":"page"},{"location":"70-error-handling/#Error-Handling","page":"Error Handling","title":"Error Handling","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"WasmtimeRuntime.jl provides comprehensive error handling for WebAssembly operations. This guide covers error types, handling patterns, and debugging strategies.","category":"page"},{"location":"70-error-handling/#Error-Types","page":"Error Handling","title":"Error Types","text":"","category":"section"},{"location":"70-error-handling/#WasmtimeError","page":"Error Handling","title":"WasmtimeError","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"The primary exception type for WebAssembly-related errors:","category":"page"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"struct WasmtimeError <: Exception\n    message::String\nend","category":"page"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"All WebAssembly operations that can fail throw WasmtimeError with descriptive messages.","category":"page"},{"location":"70-error-handling/#Common-Error-Categories","page":"Error Handling","title":"Common Error Categories","text":"","category":"section"},{"location":"70-error-handling/#Configuration-Errors","page":"Error Handling","title":"Configuration Errors","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"try\n    config = Config()\n    config.ptr = C_NULL  # Simulate invalid config\n    engine = Engine(config)\ncatch e::WasmtimeError\n    println(\"Configuration error: $(e.message)\")\nend","category":"page"},{"location":"70-error-handling/#Module-Errors","page":"Error Handling","title":"Module Errors","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"try\n    # Invalid WebAssembly bytes\n    invalid_bytes = UInt8[0x00, 0x00, 0x00, 0x00]\n    module_obj = WasmModule(engine, invalid_bytes)\ncatch e::WasmtimeError\n    println(\"Module compilation error: $(e.message)\")\nend","category":"page"},{"location":"70-error-handling/#Instance-Errors","page":"Error Handling","title":"Instance Errors","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"try\n    # Invalid store\n    store.ptr = C_NULL\n    instance = Instance(store, module_obj)\ncatch e::WasmtimeError\n    println(\"Instantiation error: $(e.message)\")\nend","category":"page"},{"location":"70-error-handling/#Function-Call-Errors","page":"Error Handling","title":"Function Call Errors","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"try\n    # Wrong parameter count or type\n    result = call(instance, \"add\", [42, 24, 33])  # Function expects 2 params\ncatch e::WasmtimeError\n    println(\"Function call error: $(e.message)\")\nend","category":"page"},{"location":"70-error-handling/#Error-Handling-Patterns","page":"Error Handling","title":"Error Handling Patterns","text":"","category":"section"},{"location":"70-error-handling/#Basic-Try-Catch","page":"Error Handling","title":"Basic Try-Catch","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function safe_wasm_operation()\n    try\n        engine = Engine()\n        store = Store(engine)\n        module_obj = WasmModule(engine, wasm_bytes)\n        instance = Instance(store, module_obj)\n        result = call(instance, \"main\", [])\n        return result\n    catch e::WasmtimeError\n        @error \"WebAssembly operation failed\" exception=e\n        return nothing\n    end\nend","category":"page"},{"location":"70-error-handling/#Specific-Error-Handling","page":"Error Handling","title":"Specific Error Handling","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function handle_specific_errors()\n    try\n        result = call(instance, \"divide\", [10, 0])\n        return result\n    catch e::WasmtimeError\n        if occursin(\"trap\", lowercase(e.message))\n            @warn \"Division by zero trapped\"\n            return 0\n        elseif occursin(\"type\", lowercase(e.message))\n            @error \"Type mismatch in function call\"\n            rethrow(e)\n        else\n            @error \"Unknown WebAssembly error\" exception=e\n            rethrow(e)\n        end\n    end\nend","category":"page"},{"location":"70-error-handling/#Error-Recovery-Patterns","page":"Error Handling","title":"Error Recovery Patterns","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function retry_with_fallback(primary_func, fallback_func, max_retries=3)\n    for attempt in 1:max_retries\n        try\n            return primary_func()\n        catch e::WasmtimeError\n            @warn \"Attempt $attempt failed\" exception=e\n\n            if attempt == max_retries\n                @info \"Trying fallback function\"\n                try\n                    return fallback_func()\n                catch fallback_error::WasmtimeError\n                    @error \"Both primary and fallback failed\"\n                           primary=e fallback=fallback_error\n                    rethrow(e)  # Rethrow original error\n                end\n            end\n\n            sleep(0.1 * attempt)  # Exponential backoff\n        end\n    end\nend","category":"page"},{"location":"70-error-handling/#Trap-Handling","page":"Error Handling","title":"Trap Handling","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"WebAssembly traps are runtime errors that occur during execution:","category":"page"},{"location":"70-error-handling/#Common-Trap-Scenarios","page":"Error Handling","title":"Common Trap Scenarios","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"# Division by zero\ntry\n    result = call(instance, \"divide\", [10, 0])\ncatch e::WasmtimeError\n    if occursin(\"trap\", lowercase(e.message))\n        println(\"Trapped: Division by zero\")\n    end\nend\n\n# Out of bounds memory access\ntry\n    result = call(instance, \"read_memory\", [1000000])  # Large offset\ncatch e::WasmtimeError\n    if occursin(\"trap\", lowercase(e.message)) && occursin(\"bounds\", lowercase(e.message))\n        println(\"Trapped: Memory access out of bounds\")\n    end\nend\n\n# Stack overflow\ntry\n    result = call(instance, \"recursive_function\", [10000])  # Deep recursion\ncatch e::WasmtimeError\n    if occursin(\"trap\", lowercase(e.message)) && occursin(\"stack\", lowercase(e.message))\n        println(\"Trapped: Stack overflow\")\n    end\nend","category":"page"},{"location":"70-error-handling/#Trap-Recovery","page":"Error Handling","title":"Trap Recovery","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function safe_wasm_call_with_trap_recovery(instance, func_name, params, default_value=nothing)\n    try\n        return call(instance, func_name, params)\n    catch e::WasmtimeError\n        if occursin(\"trap\", lowercase(e.message))\n            @warn \"Function trapped, returning default value\"\n                  function=func_name params=params exception=e\n            return default_value\n        else\n            # Re-throw non-trap errors\n            rethrow(e)\n        end\n    end\nend","category":"page"},{"location":"70-error-handling/#Resource-Management-Errors","page":"Error Handling","title":"Resource Management Errors","text":"","category":"section"},{"location":"70-error-handling/#Store-Lifecycle-Errors","page":"Error Handling","title":"Store Lifecycle Errors","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function handle_store_lifecycle()\n    local store, instance\n\n    try\n        engine = Engine()\n        store = Store(engine)\n        module_obj = WasmModule(engine, wasm_bytes)\n        instance = Instance(store, module_obj)\n\n        # Use instance...\n        result = call(instance, \"main\", [])\n\n    catch e::WasmtimeError\n        @error \"Store operation failed\" exception=e\n\n        # Check if store is still valid\n        if isdefined(@__MODULE__, :store) && !isvalid(store)\n            @warn \"Store became invalid during operation\"\n        end\n\n        rethrow(e)\n    finally\n        # Cleanup is automatic via finalizers\n        # Manual cleanup if needed\n    end\nend","category":"page"},{"location":"70-error-handling/#Memory-Management-Errors","page":"Error Handling","title":"Memory Management Errors","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function handle_memory_errors(instance)\n    try\n        # Attempt to access memory export\n        memory_export = get_export(instance, \"memory\")\n\n        # Future: Memory operations\n        # data = read_memory(memory, offset, length)\n\n    catch e::WasmtimeError\n        if occursin(\"not found\", e.message)\n            @warn \"Memory export not found, module may not export memory\"\n            return nothing\n        elseif occursin(\"bounds\", e.message)\n            @error \"Memory access out of bounds\" exception=e\n            return nothing\n        else\n            rethrow(e)\n        end\n    end\nend","category":"page"},{"location":"70-error-handling/#Validation-and-Prevention","page":"Error Handling","title":"Validation and Prevention","text":"","category":"section"},{"location":"70-error-handling/#Input-Validation","page":"Error Handling","title":"Input Validation","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function validate_inputs(engine, wasm_bytes, func_name, params)\n    # Validate engine\n    if !isvalid(engine)\n        throw(ArgumentError(\"Invalid engine\"))\n    end\n\n    # Validate WebAssembly bytes\n    if isempty(wasm_bytes)\n        throw(ArgumentError(\"Empty WebAssembly bytes\"))\n    end\n\n    if !validate(engine, wasm_bytes)\n        throw(ArgumentError(\"Invalid WebAssembly module\"))\n    end\n\n    # Validate function name\n    if isempty(func_name)\n        throw(ArgumentError(\"Empty function name\"))\n    end\n\n    # Validate parameters\n    for (i, param) in enumerate(params)\n        if !is_wasm_convertible(typeof(param))\n            @warn \"Parameter $i of type $(typeof(param)) may not be convertible to WebAssembly\"\n        end\n    end\n\n    return true\nend","category":"page"},{"location":"70-error-handling/#Defensive-Programming","page":"Error Handling","title":"Defensive Programming","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function defensive_wasm_call(instance, func_name, params; timeout=5.0, max_fuel=10000)\n    # Input validation\n    if !isvalid(instance)\n        throw(ArgumentError(\"Invalid instance\"))\n    end\n\n    if !isvalid(instance.store)\n        throw(ArgumentError(\"Invalid store\"))\n    end\n\n    # Set up fuel limiting if available\n    try\n        add_fuel!(instance.store, max_fuel)\n    catch e::WasmtimeError\n        # Fuel not enabled, continue without it\n        @debug \"Fuel consumption not enabled\"\n    end\n\n    # Timeout handling (conceptual - actual implementation would need threading)\n    try\n        # Future: Implement timeout via epoch interruption\n        result = call(instance, func_name, params)\n        return result\n    catch e::WasmtimeError\n        if occursin(\"fuel\", lowercase(e.message))\n            @error \"Function execution exhausted fuel limit\" limit=max_fuel\n        elseif occursin(\"epoch\", lowercase(e.message))\n            @error \"Function execution timed out\" timeout=timeout\n        end\n        rethrow(e)\n    end\nend","category":"page"},{"location":"70-error-handling/#Error-Reporting-and-Debugging","page":"Error Handling","title":"Error Reporting and Debugging","text":"","category":"section"},{"location":"70-error-handling/#Detailed-Error-Context","page":"Error Handling","title":"Detailed Error Context","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"function detailed_error_report(e::WasmtimeError, context...)\n    @error \"\"\"\n    WebAssembly Error Details:\n    Message: $(e.message)\n    Context: $(join(string.(context), \", \"))\n    Stack trace follows:\n    \"\"\" exception=(e, catch_backtrace())\nend\n\n# Usage\ntry\n    result = call(instance, \"complex_function\", [1, 2, 3])\ncatch e::WasmtimeError\n    detailed_error_report(e, \"complex_function\", \"params=[1,2,3]\", \"instance=$(instance)\")\n    rethrow(e)\nend","category":"page"},{"location":"70-error-handling/#Error-Aggregation","page":"Error Handling","title":"Error Aggregation","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"struct WasmtimeErrorCollector\n    errors::Vector{Tuple{String, WasmtimeError}}\nend\n\nfunction collect_errors()\n    return WasmtimeErrorCollector([])\nend\n\nfunction try_operation!(collector::WasmtimeErrorCollector, operation_name::String, f)\n    try\n        return f()\n    catch e::WasmtimeError\n        push!(collector.errors, (operation_name, e))\n        return nothing\n    end\nend\n\nfunction report_collected_errors(collector::WasmtimeErrorCollector)\n    if !isempty(collector.errors)\n        @error \"Multiple WebAssembly errors occurred:\"\n        for (name, error) in collector.errors\n            @error \"  $name: $(error.message)\"\n        end\n    end\nend\n\n# Usage\ncollector = collect_errors()\nresult1 = try_operation!(collector, \"function1\", () -> call(instance, \"func1\", []))\nresult2 = try_operation!(collector, \"function2\", () -> call(instance, \"func2\", []))\nreport_collected_errors(collector)","category":"page"},{"location":"70-error-handling/#Error-Context-Stack","page":"Error Handling","title":"Error Context Stack","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"mutable struct ErrorContext\n    stack::Vector{String}\nend\n\nfunction push_context!(ctx::ErrorContext, description::String)\n    push!(ctx.stack, description)\nend\n\nfunction pop_context!(ctx::ErrorContext)\n    if !isempty(ctx.stack)\n        pop!(ctx.stack)\n    end\nend\n\nfunction with_error_context(f, ctx::ErrorContext, description::String)\n    push_context!(ctx, description)\n    try\n        return f()\n    catch e::WasmtimeError\n        error_msg = \"$(e.message)\\nContext: $(join(reverse(ctx.stack), \" → \"))\"\n        rethrow(WasmtimeError(error_msg))\n    finally\n        pop_context!(ctx)\n    end\nend\n\n# Usage\nctx = ErrorContext([])\ntry\n    with_error_context(ctx, \"Loading module\") do\n        module_obj = WasmModule(engine, wasm_bytes)\n\n        with_error_context(ctx, \"Creating instance\") do\n            instance = Instance(store, module_obj)\n\n            with_error_context(ctx, \"Calling main function\") do\n                call(instance, \"main\", [])\n            end\n        end\n    end\ncatch e::WasmtimeError\n    println(\"Error with context: $(e.message)\")\nend","category":"page"},{"location":"70-error-handling/#Best-Practices","page":"Error Handling","title":"Best Practices","text":"","category":"section"},{"location":"70-error-handling/#Error-Handling-Strategy","page":"Error Handling","title":"Error Handling Strategy","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"Be Specific: Handle different error types appropriately\nFail Fast: Validate inputs early to catch errors sooner\nProvide Context: Include relevant information in error messages\nLog Appropriately: Use different log levels for different error severities\nClean Recovery: Ensure resources are cleaned up after errors","category":"page"},{"location":"70-error-handling/#Error-Prevention","page":"Error Handling","title":"Error Prevention","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"# Comprehensive safety wrapper\nfunction safe_wasm_execution(;\n    engine_config = nothing,\n    wasm_source,\n    function_name,\n    parameters = [],\n    fuel_limit = 10000,\n    validate_inputs = true\n)\n    local engine, store, module_obj, instance\n\n    try\n        # Create engine with error handling\n        engine = if engine_config === nothing\n            Engine()\n        else\n            Engine(engine_config)\n        end\n\n        # Validate WebAssembly source\n        wasm_bytes = if isa(wasm_source, String)\n            if !isfile(wasm_source)\n                throw(ArgumentError(\"WebAssembly file not found: $wasm_source\"))\n            end\n            read(wasm_source)\n        else\n            wasm_source\n        end\n\n        if validate_inputs && !validate(engine, wasm_bytes)\n            throw(ArgumentError(\"Invalid WebAssembly module\"))\n        end\n\n        # Create store with fuel limiting\n        store = Store(engine)\n        try\n            add_fuel!(store, fuel_limit)\n        catch e::WasmtimeError\n            @debug \"Fuel limiting not available\"\n        end\n\n        # Create module and instance\n        module_obj = WasmModule(engine, wasm_bytes)\n        instance = Instance(store, module_obj)\n\n        # Execute function\n        result = call(instance, function_name, parameters)\n\n        return (result = result, success = true, error = nothing)\n\n    catch e::Exception\n        error_msg = if e isa WasmtimeError\n            \"WebAssembly error: $(e.message)\"\n        else\n            \"System error: $(string(e))\"\n        end\n\n        @error error_msg exception=e\n        return (result = nothing, success = false, error = e)\n    end\nend","category":"page"},{"location":"70-error-handling/#Testing-Error-Conditions","page":"Error Handling","title":"Testing Error Conditions","text":"","category":"section"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"# Test error handling in your code\nfunction test_error_handling()\n    # Test invalid engine\n    @test_throws WasmtimeError begin\n        config = Config()\n        config.ptr = C_NULL\n        Engine(config)\n    end\n\n    # Test invalid module\n    @test_throws WasmtimeError begin\n        WasmModule(engine, UInt8[0x00, 0x00, 0x00, 0x00])\n    end\n\n    # Test function call with wrong parameters\n    @test_throws WasmtimeError begin\n        call(instance, \"add\", [])  # Missing parameters\n    end\nend","category":"page"},{"location":"70-error-handling/","page":"Error Handling","title":"Error Handling","text":"Robust error handling is essential for production WebAssembly applications. By following these patterns, you can build resilient systems that gracefully handle errors and provide meaningful feedback to users and developers.","category":"page"},{"location":"02-core-concepts/#Core-Concepts","page":"Core Concepts","title":"Core Concepts","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"This guide introduces the fundamental concepts and architecture of WasmtimeRuntime.jl.","category":"page"},{"location":"02-core-concepts/#WebAssembly-Runtime-Architecture","page":"Core Concepts","title":"WebAssembly Runtime Architecture","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"WasmtimeRuntime.jl follows the WebAssembly specification's runtime architecture:","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Engine → Store → Module → Instance → Functions/Memory/Globals/Tables\n   ↓        ↓        ↓         ↓              ↓\nConfig   Context   WASM    Runtime      WebAssembly\n                  Bytes    Objects       Execution","category":"page"},{"location":"02-core-concepts/#Core-Components","page":"Core Concepts","title":"Core Components","text":"","category":"section"},{"location":"02-core-concepts/#Engine","page":"Core Concepts","title":"Engine","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The WasmEngine is the compilation environment responsible for compiling WebAssembly modules. It's configured once and can be shared across multiple stores.","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# Default engine\nengine = WasmEngine()\n\n# Configured engine\nconfig = WasmConfig(optimization_level = Speed, debug_info = true)\nengine = WasmEngine(config)","category":"page"},{"location":"02-core-concepts/#Store","page":"Core Concepts","title":"Store","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"The WasmStore represents an isolated runtime context. Each store has its own:","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Memory instances\nGlobal variables\nFunction instances\nTables","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"store = WasmStore(engine)","category":"page"},{"location":"02-core-concepts/#Module","page":"Core Concepts","title":"Module","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"A WasmModule represents compiled WebAssembly code. Modules are immutable and can be instantiated multiple times.","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# From WAT (✅ Working)\nwat_content = \"\"\"\n(module\n  (func $test (result i32)\n    i32.const 42))\n\"\"\"\nwasm_bytes = wat2wasm(wat_content)\nmodule_obj = WasmModule(engine, wasm_bytes)\n\n# From file bytes\nwasm_bytes = read(\"module.wasm\")\nmodule_obj = WasmModule(engine, wasm_bytes)","category":"page"},{"location":"02-core-concepts/#Instance","page":"Core Concepts","title":"Instance","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"A WasmInstance is a runtime instantiation of a module within a store. Each instance has its own:","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Memory state\nGlobal values\nFunction closures","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"instance = WasmInstance(store, module_obj)","category":"page"},{"location":"02-core-concepts/#Type-System","page":"Core Concepts","title":"Type System","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"WasmtimeRuntime.jl provides a type-safe interface to WebAssembly's value types:","category":"page"},{"location":"02-core-concepts/#Type-Conversion","page":"Core Concepts","title":"Type Conversion","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# Value creation (implemented)\nval_i32 = WasmValue(42)\nval_f64 = WasmValue(3.14159)","category":"page"},{"location":"02-core-concepts/#Resource-Management","page":"Core Concepts","title":"Resource Management","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"WasmtimeRuntime.jl uses Julia's garbage collection and finalizers for automatic resource cleanup:","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Engines: Cleaned up when GC'd\nStores: Cleaned up when GC'd\nModules: Cleaned up when GC'd\nInstances: Tied to store lifetime","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"# Resources are automatically cleaned up\nlet\n    engine = WasmEngine()\n    store = WasmStore(engine)\n    # ... use resources\nend  # Resources cleaned up here","category":"page"},{"location":"02-core-concepts/#Abstract-Type-Hierarchy","page":"Core Concepts","title":"Abstract Type Hierarchy","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"WasmtimeObject\n├── WasmtimeResource\n│   ├── AbstractEngine\n│   ├── AbstractStore\n│   ├── AbstractModule\n│   ├── AbstractInstance\n│   ├── AbstractFunc\n│   ├── AbstractMemory\n│   ├── AbstractGlobal\n│   └── AbstractTable\n├── WasmtimeValue\n│   └── WasmValue{T}\n├── WasmtimeType\n└── AbstractConfig","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"This hierarchy ensures type safety and enables multiple dispatch for WebAssembly operations.","category":"page"},{"location":"02-core-concepts/#Thread-Safety","page":"Core Concepts","title":"Thread Safety","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Current Implementation Status:","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Engines: Thread-safe, can be shared across threads ✅\nStores: Not thread-safe, use one per thread ✅\nModules: Thread-safe after compilation ✅\nInstances: Tied to store, not thread-safe ✅","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"Note: Thread safety characteristics are based on the underlying Wasmtime library implementation.","category":"page"},{"location":"02-core-concepts/#Error-Handling","page":"Core Concepts","title":"Error Handling","text":"","category":"section"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"All operations that can fail throw WasmtimeError with descriptive messages:","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"try\n    module_obj = WasmModule(engine, invalid_bytes)\ncatch e::WasmtimeError\n    println(\"Failed to create module: $(e.message)\")\nend","category":"page"},{"location":"02-core-concepts/","page":"Core Concepts","title":"Core Concepts","text":"See Error Handling for comprehensive error handling patterns.","category":"page"},{"location":"52-tables/#WebAssembly-Tables","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"WebAssembly tables are resizable arrays that hold references to functions or other WebAssembly objects. In WasmtimeRuntime.jl, tables are represented by the WasmTable type, which provides a Julia-friendly interface for working with WebAssembly table objects.","category":"page"},{"location":"52-tables/#Table-Types","page":"WebAssembly Tables","title":"Table Types","text":"","category":"section"},{"location":"52-tables/#WasmTableType","page":"WebAssembly Tables","title":"WasmTableType","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"The WasmTableType represents the type information for a WebAssembly table, including its size limits and element type.","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Create a table type with default limits (0 => 0)\ntable_type = WasmTableType()\n\n# Create a table type with custom limits\ntable_type = WasmTableType(10 => 100)  # min=10, max=100\n\n# Create from WasmLimits\nlimits = WasmLimits(5, 50)\ntable_type = WasmTableType(limits)","category":"page"},{"location":"52-tables/#Size-Limits","page":"WebAssembly Tables","title":"Size Limits","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Table limits specify the minimum and maximum number of elements:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Minimum: Initial number of elements (must be ≥ 0)\nMaximum: Maximum number of elements (0 means unlimited)","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Table with 5 initial elements, max 20\ntable_type = WasmTableType(5 => 20)\n\n# Table with 10 initial elements, unlimited growth\ntable_type = WasmTableType(10 => 0)\n\n# Empty table that can grow up to 100 elements\ntable_type = WasmTableType(0 => 100)","category":"page"},{"location":"52-tables/#Creating-Tables","page":"WebAssembly Tables","title":"Creating Tables","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Tables are created using a WasmStore and WasmTableType:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Set up WebAssembly environment\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create table type and table\ntable_type = WasmTableType(5 => 50)\ntable = WasmTable(store, table_type)","category":"page"},{"location":"52-tables/#Table-Interface","page":"WebAssembly Tables","title":"Table Interface","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"WasmTable implements the AbstractVector interface, providing familiar array-like operations:","category":"page"},{"location":"52-tables/#Size-and-Indexing","page":"WebAssembly Tables","title":"Size and Indexing","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Get table size\ntable_size = length(table)\nsize_tuple = size(table)  # Returns (length,)\n\n# Access elements (1-based indexing)\nfirst_element = table[1]\nlast_element = table[end]\n\n# Check bounds\nif length(table) > 0\n    element = table[1]  # Safe access\nend","category":"page"},{"location":"52-tables/#Element-Access","page":"WebAssembly Tables","title":"Element Access","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Table elements are function references or other WebAssembly references:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Access table element\nelement = table[1]\n\nif element === nothing\n    println(\"Slot is empty\")\nelse\n    println(\"Slot contains a reference\")\n    # element is a Ptr{LibWasmtime.wasm_ref_t}\nend","category":"page"},{"location":"52-tables/#Type-Information","page":"WebAssembly Tables","title":"Type Information","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Extract type information from existing tables:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Get table type from table\nextracted_type = WasmTableType(table)","category":"page"},{"location":"52-tables/#Error-Handling","page":"WebAssembly Tables","title":"Error Handling","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Common error scenarios and how to handle them:","category":"page"},{"location":"52-tables/#Invalid-Store","page":"WebAssembly Tables","title":"Invalid Store","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\nstore.ptr = C_NULL  # Invalidate store\n\ntable_type = WasmTableType()\n\n# This will throw ArgumentError\ntry\n    table = WasmTable(store, table_type)\ncatch e\n    println(\"Failed to create table: \", e)\nend","category":"page"},{"location":"52-tables/#Bounds-Checking","page":"WebAssembly Tables","title":"Bounds Checking","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"table_type = WasmTableType(3 => 10)\ntable = WasmTable(store, table_type)\n\n# These will throw BoundsError\ntry\n    table[0]     # Invalid: 0-based indexing\n    table[-1]    # Invalid: negative index\n    table[100]   # Invalid: beyond table size\ncatch BoundsError\n    println(\"Index out of bounds\")\nend","category":"page"},{"location":"52-tables/#Invalid-Limits","page":"WebAssembly Tables","title":"Invalid Limits","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"\ntry\n    invalid_limits = WasmLimits(10, 5)  # max < min <---  This will throw ArgumentError\n    table_type = WasmTableType(invalid_limits)\ncatch ArgumentError\n    println(\"Invalid table limits\")\nend","category":"page"},{"location":"52-tables/#Advanced-Usage","page":"WebAssembly Tables","title":"Advanced Usage","text":"","category":"section"},{"location":"52-tables/#Working-with-Multiple-Tables","page":"WebAssembly Tables","title":"Working with Multiple Tables","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create multiple tables with different sizes\nsmall_table = WasmTable(store, WasmTableType(2 => 10))\nlarge_table = WasmTable(store, WasmTableType(50 => 1000))\n\nprintln(\"Small table size: \", length(small_table))\nprintln(\"Large table size: \", length(large_table))","category":"page"},{"location":"52-tables/#Resource-Management","page":"WebAssembly Tables","title":"Resource Management","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Tables are automatically cleaned up when they go out of scope:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"function create_temporary_table()\n    engine = WasmEngine()\n    store = WasmStore(engine)\n    table_type = WasmTableType(5 => 20)\n    table = WasmTable(store, table_type)\n\n    # Use table...\n    return length(table)\nend\n\nsize = create_temporary_table()\n# Table is automatically cleaned up when function exits","category":"page"},{"location":"52-tables/#Performance-Considerations","page":"WebAssembly Tables","title":"Performance Considerations","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"For optimal performance:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Reuse stores: Create one store and use it for multiple tables\nAppropriate sizing: Set realistic minimum and maximum limits\nAvoid frequent type extraction: Cache WasmTableType objects when needed","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"engine = WasmEngine()\nstore = WasmStore(engine)  # Reuse this store\n\n# Create multiple tables efficiently\ntables = [WasmTable(store, WasmTableType(i => i*10)) for i in 1:5]","category":"page"},{"location":"52-tables/#Integration-with-WebAssembly-Modules","page":"WebAssembly Tables","title":"Integration with WebAssembly Modules","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Tables are typically used with WebAssembly modules that export or import table objects:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Example: working with a module that uses tables\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create table for module\ntable_type = WasmTableType(10 => 100)\ntable = WasmTable(store, table_type)\n\n# Table can be passed to module instantiation\n# (specific module loading code would depend on your WebAssembly module)","category":"page"},{"location":"52-tables/#Type-System-Integration","page":"WebAssembly Tables","title":"Type System Integration","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"WasmTable integrates well with Julia's type system:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"table = WasmTable(store, WasmTableType(5 => 20))\n\n# Type checking\n@assert table isa AbstractVector\n@assert eltype(table) == Union{Nothing, Ptr{LibWasmtime.wasm_ref_t}}\n\n# Standard vector operations\n@assert ndims(table) == 1\n@assert firstindex(table) == 1","category":"page"},{"location":"52-tables/#Best-Practices","page":"WebAssembly Tables","title":"Best Practices","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Validate inputs: Always check that stores and table types are valid\nHandle bounds: Use proper bounds checking when accessing elements\nResource cleanup: Let Julia's garbage collector handle cleanup automatically\nError handling: Wrap table operations in try-catch blocks for robustness","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"function safe_table_access(table, index)\n    try\n        if index in 1:length(table)\n            return table[index]\n        else\n            @warn \"Index $index out of bounds for table of size $(length(table))\"\n            return nothing\n        end\n    catch e\n        @error \"Error accessing table: $e\"\n        return nothing\n    end\nend","category":"page"},{"location":"01-getting-started/#Getting-Started-with-WasmtimeRuntime.jl","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"This guide will help you get started with WasmtimeRuntime.jl, a Julia wrapper for the Wasmtime WebAssembly runtime engine.","category":"page"},{"location":"01-getting-started/#Installation","page":"Getting Started with WasmtimeRuntime.jl","title":"Installation","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"Add WasmtimeRuntime.jl to your Julia environment:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"using Pkg\nPkg.add(\"WasmtimeRuntime\")","category":"page"},{"location":"01-getting-started/#Basic-Usage","page":"Getting Started with WasmtimeRuntime.jl","title":"Basic Usage","text":"","category":"section"},{"location":"01-getting-started/#1.-Setting-Up-the-Runtime","page":"Getting Started with WasmtimeRuntime.jl","title":"1. Setting Up the Runtime","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"First, create the core runtime components:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"using WasmtimeRuntime\n\n# Create engine with default configuration\nengine = WasmEngine()\n\n# Create store for runtime state\nstore = WasmStore(engine)","category":"page"},{"location":"01-getting-started/#2.-WAT-to-WASM-Compilation-(-Working-Feature)","page":"Getting Started with WasmtimeRuntime.jl","title":"2. WAT to WASM Compilation (✅ Working Feature)","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"Convert WebAssembly Text format to binary format:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"wat_content = \"\"\"\n(module\n  (func $add (param $x i32) (param $y i32) (result i32)\n    local.get $x\n    local.get $y\n    i32.add)\n  (export \"add\" (func $add)))\n\"\"\"\n\n# Convert WAT to WASM bytes\nwasm_bytes = wat2wasm(wat_content)\n\n# Create module from bytes\nmodule_obj = WasmModule(engine, wasm_bytes)\n\n# Instantiate the module\ninstance = WasmInstance(store, module_obj)","category":"page"},{"location":"01-getting-started/#3.-Working-with-Values-and-Types-(-Working-Feature)","page":"Getting Started with WasmtimeRuntime.jl","title":"3. Working with Values and Types (✅ Working Feature)","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"Create and validate WebAssembly values:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"# Value creation (implemented)\nval_i32 = WasmValue(42)\nval_f64 = WasmValue(3.14159)\n\n# Type validation (working)\nis_wasm_convertible(Int32)  # true\nis_wasm_convertible(String) # false","category":"page"},{"location":"01-getting-started/#4.-Function-Calling-(-Under-Development)","page":"Getting Started with WasmtimeRuntime.jl","title":"4. Function Calling (🚧 Under Development)","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"⚠️ Note: Function calling functionality is currently under active development and not yet available.","category":"page"},{"location":"01-getting-started/#Configuration-Options","page":"Getting Started with WasmtimeRuntime.jl","title":"Configuration Options","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"Customize the Wasmtime engine with configuration options:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"# Create custom configuration\nconfig = WasmConfig(\n    debug_info = true,\n    optimization_level = Speed,\n    profiling_strategy = NoProfilingStrategy\n)\n\n# Enable specific features\nconsume_fuel!(config, true)\nmax_wasm_stack!(config, 1024 * 1024)  # 1MB stack\n\n# Create engine with custom config\nengine = WasmEngine(config)","category":"page"},{"location":"01-getting-started/#Error-Handling","page":"Getting Started with WasmtimeRuntime.jl","title":"Error Handling","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"WasmtimeRuntime.jl uses Julia's exception system:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"try\n    # Example with actual working functionality\n    wasm_bytes = wat2wasm(\"invalid wat syntax\")\ncatch e\n    if isa(e, WasmtimeError)\n        println(\"WebAssembly error: $(e.message)\")\n    else\n        rethrow(e)\n    end\nend","category":"page"},{"location":"01-getting-started/#Memory-Management","page":"Getting Started with WasmtimeRuntime.jl","title":"Memory Management","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"Resources are automatically managed through Julia's garbage collector:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"# Resources are automatically cleaned up when objects go out of scope\nfunction process_wasm()\n    engine = WasmEngine()\n    store = WasmStore(engine)\n    # ... work with WebAssembly\n    # Automatic cleanup when function exits\nend","category":"page"},{"location":"01-getting-started/#Example:-Complete-Workflow","page":"Getting Started with WasmtimeRuntime.jl","title":"Example: Complete Workflow","text":"","category":"section"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"Here's a complete example using currently implemented features:","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"using WasmtimeRuntime\n\n# Setup\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# WAT to WASM conversion (working feature)\nwat_content = \"\"\"\n(module\n  (func $multiply (param $x i32) (param $y i32) (result i32)\n    local.get $x\n    local.get $y\n    i32.mul)\n  (export \"multiply\" (func $multiply)))\n\"\"\"\n\n# Convert and load module\nwasm_bytes = wat2wasm(wat_content)\nmodule_obj = WasmModule(engine, wasm_bytes)\ninstance = WasmInstance(store, module_obj)\n\n# Work with values\nval1 = WasmValue(6)\nval2 = WasmValue(7)\nprintln(\"Created values: $val1, $val2\")\n\n# Module introspection (currently returns placeholder data)\nexports_info = exports(module_obj)\nprintln(\"Module exports: $exports_info\")","category":"page"},{"location":"01-getting-started/","page":"Getting Started with WasmtimeRuntime.jl","title":"Getting Started with WasmtimeRuntime.jl","text":"⚠️ Note: This example demonstrates currently working features. Function calling will be added in a future release.","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#WasmtimeRuntime.WasmExternObjectType","page":"Reference","title":"WasmtimeRuntime.WasmExternObjectType","text":"WasmExternObjectType\n\nUnion type for all WebAssembly extern objects that can be wrapped by WasmExtern. Includes functions, globals, tables, and memories.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmExtern","page":"Reference","title":"WasmtimeRuntime.WasmExtern","text":"WasmExtern{E<:WasmExternObjectType} <: AbstractWasmExtern\n\nA wrapper for WebAssembly extern objects that provides a unified interface for functions, globals, tables, and memories. This struct converts specific extern objects into the generic wasm_extern_t representation used by the Wasmtime C API. Important! The original object is finalized when creating the WasmExtern wrapper, as ownership transfers to the wrapper. This means the original object should not be used after creating the WasmExtern.\n\nType Parameters\n\nE: The specific extern object type (WasmFunc, WasmGlobal, WasmTable, or WasmMemory)\n\nFields\n\nptr::Ptr{LibWasmtime.wasm_extern_t}: Pointer to the underlying C extern object\n\nConstructor\n\nWasmExtern(obj::WasmExternObjectType)\n\nCreates a WasmExtern wrapper around a specific extern object. The original object is finalized during construction as ownership transfers to the wrapper.\n\nExamples\n\n# Create extern wrappers for different object types\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Memory extern\nmemory = WasmMemory(store, (1 => 10))\nmemory_extern = WasmExtern(memory)\n\n# Global extern (when implemented)\n# global_type = WasmGlobalType(WasmValType(Int32), false)\n# global = WasmGlobal(store, global_type, WasmValue(Int32(42)))\n# global_extern = WasmExtern(global)\n\nNotes\n\nThe original object is finalized when creating the extern wrapper\nEach extern type uses its corresponding _as_extern C API function\nThe resulting extern can be used in import/export operations\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmGlobal","page":"Reference","title":"WasmtimeRuntime.WasmGlobal","text":"WasmGlobal(store::WasmStore, global_type::WasmGlobalType, initial_value::WasmValue) -> WasmGlobal\n\nWebAssembly global variable that can hold a single value of a specific type.\n\nGlobal variables can be either mutable or immutable as defined by their type. They maintain their value throughout the lifetime of a WebAssembly instance.\n\nArguments\n\nstore::WasmStore: The store that owns this global\nglobal_type::WasmGlobalType: Type descriptor defining value type and mutability\ninitial_value::WasmValue: Initial value for the global variable\n\nExamples\n\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a mutable Int32 global\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)  # mutable\nglobal_var = WasmGlobal(store, global_type, WasmValue(Int32(42)))\n\n# Create an immutable Float64 global\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)  # immutable\nglobal_var = WasmGlobal(store, global_type, WasmValue(3.14159))\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmGlobalType","page":"Reference","title":"WasmtimeRuntime.WasmGlobalType","text":"WasmGlobalType(valtype::WasmValtype, mutability::Bool) -> WasmGlobalType\n\nWebAssembly global type descriptor that defines the type and mutability of a global variable.\n\nArguments\n\nvaltype::WasmValtype: The value type (Int32, Int64, Float32, Float64)\nmutability::Bool: true for mutable globals, false for immutable globals\n\nExamples\n\n# Create a mutable Int32 global type\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)\n\n# Create an immutable Float64 global type\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmTable","page":"Reference","title":"WasmtimeRuntime.WasmTable","text":"WasmTable\n\nWebAssembly table that holds function references or other reference types. Implements AbstractVector interface for element access.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmTableType","page":"Reference","title":"WasmtimeRuntime.WasmTableType","text":"WasmTableType\n\nRepresents a WebAssembly table type with size limits and element type. Tables hold function references or other reference types.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmTableType-Tuple{WasmTable}","page":"Reference","title":"WasmtimeRuntime.WasmTableType","text":"WasmTableType(table::WasmTable)\n\nExtract the table type from an existing table.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#WasmtimeRuntime.WasmVec","page":"Reference","title":"WasmtimeRuntime.WasmVec","text":"WasmVec{T,S} <: AbstractVector{S}\n\nGeneric wrapper around wasm_XXX_vec_t types that implements AbstractVector interface.\n\nExamples\n\nextern_vec = WasmVec{wasm_extern_vec_t, Ptr{wasm_extern_t}}()\nwasm_vec = WasmVec([ptr1, ptr2, ptr3])\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Base.getindex-Tuple{WasmTable, Int64}","page":"Reference","title":"Base.getindex","text":"getindex(table::WasmTable, index::Int)\n\nGet a reference from the table at the given index (1-based indexing). Returns nothing if the slot is empty, or a reference pointer if occupied.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#WasmtimeRuntime.wat2wasm-Tuple{AbstractString}","page":"Reference","title":"WasmtimeRuntime.wat2wasm","text":"wat2wasm(wat::AbstractString) -> WasmByteVec\n\nConverts a WebAssembly Text format (WAT) string to its corresponding WebAssembly binary format (WASM). Takes a WAT string as input and returns a WasmByteVec containing the compiled WASM bytes.\n\n\n\n\n\n","category":"method"},{"location":"40-instances/#WebAssembly-Instances","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"WebAssembly instances represent the runtime instantiation of modules with their own isolated state.","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Each Instance in Wasmtime only represents Module Instances. As such from the WASM specification perspective:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"A module instance is the runtime representation of a module. It is created by instantiating a module, and collects runtime representations of all entities that are imported, defined, or exported by the module.","category":"page"},{"location":"40-instances/#Instance-Basics","page":"WebAssembly Instances","title":"Instance Basics","text":"","category":"section"},{"location":"40-instances/#Creating-Instances","page":"WebAssembly Instances","title":"Creating Instances","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"# Basic instance creation\nengine = WasmEngine()\nstore = WasmStore(engine)\nwasm_bytes = read(\"module.wasm\")\nmodule_obj = WasModule(engine, wasm_bytes)\n\n# Create instance\ninstance = WasmInstance(store, module_obj)","category":"page"},{"location":"40-instances/#Instance-State-Management","page":"WebAssembly Instances","title":"Instance State Management","text":"","category":"section"},{"location":"40-instances/#Isolated-State","page":"WebAssembly Instances","title":"Isolated State","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Each instance maintains its own state:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"# Create multiple instances from the same module\ninstance1 = Instance(store1, module_obj)\ninstance2 = Instance(store2, module_obj)\n\n# Each instance has separate:\n# - Memory contents\n# - Global variable values\n# - Function state","category":"page"},{"location":"40-instances/#Store-Association","page":"WebAssembly Instances","title":"Store Association","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Instances are bound to specific stores:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"engine = Engine()\nstore1 = Store(engine)\nstore2 = Store(engine)\n\nmodule_obj = WasmModule(engine, wasm_bytes)\n\n# Each instance tied to its store\ninstance1 = Instance(store1, module_obj)\ninstance2 = Instance(store2, module_obj)\n\n# Instances cannot be used with different stores","category":"page"},{"location":"40-instances/#Memory-Sharing","page":"WebAssembly Instances","title":"Memory Sharing","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Within the same store, instances can share certain resources:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"# Multiple instances in the same store\nstore = Store(engine)\ninstance1 = Instance(store, module_obj)\ninstance2 = Instance(store, module_obj)\n\n# They share the store context but maintain separate module state","category":"page"},{"location":"40-instances/#Error-Handling","page":"WebAssembly Instances","title":"Error Handling","text":"","category":"section"},{"location":"40-instances/#Instance-Creation-Errors","page":"WebAssembly Instances","title":"Instance Creation Errors","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"try\n    # Invalid store\n    store.ptr = C_NULL\n    instance = Instance(store, module_obj)\ncatch e::WasmtimeError\n    println(\"Invalid store: $(e.message)\")\nend\n\ntry\n    # Invalid module\n    module_obj.ptr = C_NULL\n    instance = Instance(store, module_obj)\ncatch e::WasmtimeError\n    println(\"Invalid module: $(e.message)\")\nend","category":"page"},{"location":"50-functions/#Function-Calling-and-Type-Conversion","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"","category":"section"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"WasmtimeRuntime.jl provides a WasmFunc struct to create and interface with WebAssembly functions.","category":"page"},{"location":"50-functions/#Defining-WebAssembly-Functions","page":"Function Calling and Type Conversion","title":"Defining WebAssembly Functions","text":"","category":"section"},{"location":"50-functions/#Example:-Function-taking-(i32,-i32)-i32","page":"Function Calling and Type Conversion","title":"Example: Function taking (i32, i32) → i32","text":"","category":"section"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"function add(x::Int32, y::Int32)::Int32\n    return x + y\nend\n\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a WebAssembly function from a Julia function\nwasm_func = WasmFunc(store, add)","category":"page"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"note: Note\nThe WasmFunc constructor automatically infers the function signature from the Julia function's type annotations. For now, it only supports functions with a single signature, i.e., no overloading.","category":"page"},{"location":"50-functions/#Function-Calling","page":"Function Calling and Type Conversion","title":"Function Calling","text":"","category":"section"},{"location":"50-functions/#Direct-Function-Calls","page":"Function Calling and Type Conversion","title":"Direct Function Calls","text":"","category":"section"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"# Specify parameter types explicitly\nresult = WasmFunc(store, add)(42, 24)  # Returns Int32\n\n# Will throw an error if the types do not match\nresult = WasmFunc(store, add)(42.0, 24)  # Throws error","category":"page"},{"location":"60-objects/#WebAssembly-Objects:-Memory,-Globals,-and-Tables","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"⚠️ Implementation Status: Object access functionality is currently under development. This page documents the planned API.","category":"page"},{"location":"60-objects/#Current-Limitations","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Current Limitations","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"The following WebAssembly object types are not yet fully implemented:","category":"page"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"Memory object access and manipulation\nGlobal variable access and modification\nTable operations and function references\nComplete export resolution","category":"page"},{"location":"60-objects/#Basic-Export-Access-(-Partial)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Basic Export Access (🚧 Partial)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Currently available (limited functionality)\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create instance\nwat_content = \"\"\"\n(module\n  (memory $mem 1)\n  (global $counter (mut i32) (i32.const 0))\n  (table $table 10 funcref)\n  (export \"memory\" (memory $mem))\n  (export \"counter\" (global $counter))\n  (export \"table\" (table $table)))\n\"\"\"\n\nwasm_bytes = wat2wasm(wat_content)\nmodule_obj = WasmModule(engine, wasm_bytes)\ninstance = WasmInstance(store, module_obj)\n\n# Export enumeration currently returns placeholder data\nexports_info = exports(module_obj)  # Dict{String,Any}()","category":"page"},{"location":"60-objects/#Planned-Features-(-Future-Release)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Planned Features (📋 Future Release)","text":"","category":"section"},{"location":"60-objects/#Memory-Objects-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Memory Objects (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"WebAssembly linear memory will be accessible through:","category":"page"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Planned API for memory operations\nstruct Memory <: AbstractMemory\n    ptr::Ptr{LibWasmtime.wasmtime_memory_t}\n    store::Store\nend\n\n# Memory size operations\nfunction memory_size(memory::Memory)::Int32\n    # Get current size in pages (64KB each)\n    return LibWasmtime.wasmtime_memory_size(memory.store.context, memory.ptr)\nend\n\nfunction memory_grow!(memory::Memory, delta_pages::Int32)::Int32\n    # Grow memory by delta pages, return previous size\n    prev_size_ref = Ref{Int32}()\n    error_ptr = LibWasmtime.wasmtime_memory_grow(\n        memory.store.context,\n        memory.ptr,\n        delta_pages,\n        prev_size_ref\n    )\n    check_error(error_ptr)\n    return prev_size_ref[]\nend","category":"page"},{"location":"60-objects/#Memory-Data-Access-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Memory Data Access (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Read/write memory data\nfunction read_memory(memory::Memory, offset::Int32, length::Int32)::Vector{UInt8}\n    # Get raw memory pointer\n    data_ptr = LibWasmtime.wasmtime_memory_data(memory.store.context, memory.ptr)\n    data_size = LibWasmtime.wasmtime_memory_data_size(memory.store.context, memory.ptr)\n\n    # Bounds checking\n    if offset + length > data_size\n        throw(BoundsError(\"Memory access out of bounds\"))\n    end\n\n    # Copy data safely\n    result = Vector{UInt8}(undef, length)\n    unsafe_copyto!(pointer(result), data_ptr + offset, length)\n    return result\nend\n\nfunction write_memory!(memory::Memory, offset::Int32, data::Vector{UInt8})\n    data_ptr = LibWasmtime.wasmtime_memory_data(memory.store.context, memory.ptr)\n    data_size = LibWasmtime.wasmtime_memory_data_size(memory.store.context, memory.ptr)\n\n    if offset + length(data) > data_size\n        throw(BoundsError(\"Memory write out of bounds\"))\n    end\n\n    unsafe_copyto!(data_ptr + offset, pointer(data), length(data))\nend","category":"page"},{"location":"60-objects/#Global-Basics","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Global Basics","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"WebAssembly globals are typed values that can be either mutable or immutable:","category":"page"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Globals are retrieved from exports\nglobal_export = get_export(instance, \"global_var\")\n\n# TODO: Convert to Global type\n# global_var = Global(export_ptr, store)","category":"page"},{"location":"60-objects/#Global-Operations-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Global Operations (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"struct Global <: AbstractGlobal\n    ptr::Ptr{LibWasmtime.wasmtime_global_t}\n    store::Store\nend\n\n# Read global value\nfunction get_global(global_var::Global)::WasmValue\n    val_ref = Ref{LibWasmtime.wasmtime_val_t}()\n    LibWasmtime.wasmtime_global_get(\n        global_var.store.context,\n        global_var.ptr,\n        val_ref\n    )\n    return convert_wasmtime_val_to_julia(val_ref[])\nend\n\n# Write global value (if mutable)\nfunction set_global!(global_var::Global, value::WasmValue)\n    val = convert_julia_to_wasmtime_val(value)\n    error_ptr = LibWasmtime.wasmtime_global_set(\n        global_var.store.context,\n        global_var.ptr,\n        Ref(val)\n    )\n    check_error(error_ptr)\nend","category":"page"},{"location":"60-objects/#Global-Type-Information-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Global Type Information (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Get global type information\nfunction global_type(global_var::Global)\n    type_ptr = LibWasmtime.wasmtime_global_type(\n        global_var.store.context,\n        global_var.ptr\n    )\n\n    # Extract type information\n    return (\n        value_type = get_global_value_type(type_ptr),\n        is_mutable = get_global_mutability(type_ptr)\n    )\nend","category":"page"},{"location":"60-objects/#Tables","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Tables","text":"","category":"section"},{"location":"60-objects/#Table-Basics","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Table Basics","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"WebAssembly tables are arrays of opaque values (typically function references):","category":"page"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Tables are retrieved from exports\ntable_export = get_export(instance, \"table\")\n\n# TODO: Convert to Table type\n# table = Table(export_ptr, store)","category":"page"},{"location":"60-objects/#Table-Operations-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Table Operations (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"struct Table <: AbstractTable\n    ptr::Ptr{LibWasmtime.wasmtime_table_t}\n    store::Store\nend\n\n# Get table size\nfunction table_size(table::Table)::Int32\n    return LibWasmtime.wasmtime_table_size(table.store.context, table.ptr)\nend\n\n# Get table element\nfunction get_table_element(table::Table, index::Int32)::Union{WasmValue, Nothing}\n    val_ref = Ref{LibWasmtime.wasmtime_val_t}()\n    found = LibWasmtime.wasmtime_table_get(\n        table.store.context,\n        table.ptr,\n        index,\n        val_ref\n    )\n\n    if found != 0\n        return convert_wasmtime_val_to_julia(val_ref[])\n    else\n        return nothing\n    end\nend\n\n# Set table element\nfunction set_table_element!(table::Table, index::Int32, value::WasmValue)\n    val = convert_julia_to_wasmtime_val(value)\n    error_ptr = LibWasmtime.wasmtime_table_set(\n        table.store.context,\n        table.ptr,\n        index,\n        Ref(val)\n    )\n    check_error(error_ptr)\nend\n\n# Grow table\nfunction table_grow!(table::Table, delta::Int32, init_value::WasmValue)::Int32\n    init_val = convert_julia_to_wasmtime_val(init_value)\n    prev_size_ref = Ref{Int32}()\n\n    error_ptr = LibWasmtime.wasmtime_table_grow(\n        table.store.context,\n        table.ptr,\n        delta,\n        Ref(init_val),\n        prev_size_ref\n    )\n\n    check_error(error_ptr)\n    return prev_size_ref[]\nend","category":"page"},{"location":"60-objects/#Export-Management","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Export Management","text":"","category":"section"},{"location":"60-objects/#Current-Export-Retrieval","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Current Export Retrieval","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Current implementation returns raw wasmtime_extern_t\nfunction get_memory_export(instance::Instance, name::String)\n    export_item = get_export(instance, name)\n    # TODO: Type checking and conversion\n    return export_item\nend\n\nfunction get_global_export(instance::Instance, name::String)\n    export_item = get_export(instance, name)\n    # TODO: Type checking and conversion\n    return export_item\nend\n\nfunction get_table_export(instance::Instance, name::String)\n    export_item = get_export(instance, name)\n    # TODO: Type checking and conversion\n    return export_item\nend","category":"page"},{"location":"60-objects/#Future-Export-Management","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Future Export Management","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Future type-safe export retrieval\nfunction get_export_typed(instance::Instance, name::String, ::Type{T}) where T\n    export_item = get_export(instance, name)\n\n    if T == Memory\n        return convert_to_memory(export_item, instance.store)\n    elseif T == Global\n        return convert_to_global(export_item, instance.store)\n    elseif T == Table\n        return convert_to_table(export_item, instance.store)\n    elseif T == Func\n        return convert_to_func(export_item, instance.store)\n    else\n        throw(ArgumentError(\"Unsupported export type: $T\"))\n    end\nend\n\n# Convenience methods\nget_memory(instance, name) = get_export_typed(instance, name, Memory)\nget_global(instance, name) = get_export_typed(instance, name, Global)\nget_table(instance, name) = get_export_typed(instance, name, Table)","category":"page"},{"location":"60-objects/#Working-with-Object-Types","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Working with Object Types","text":"","category":"section"},{"location":"60-objects/#Type-Identification-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Type Identification (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Identify export types\nfunction identify_export_type(export_item)\n    extern_type = LibWasmtime.wasmtime_extern_type(context, export_item)\n    kind = LibWasmtime.wasm_externtype_kind(extern_type)\n\n    if kind == LibWasmtime.WASMTIME_EXTERN_FUNC\n        return Func\n    elseif kind == LibWasmtime.WASMTIME_EXTERN_MEMORY\n        return Memory\n    elseif kind == LibWasmtime.WASMTIME_EXTERN_GLOBAL\n        return Global\n    elseif kind == LibWasmtime.WASMTIME_EXTERN_TABLE\n        return Table\n    else\n        throw(ArgumentError(\"Unknown export type\"))\n    end\nend","category":"page"},{"location":"60-objects/#Generic-Export-Processing","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Generic Export Processing","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Process all exports generically\nfunction process_all_exports(instance::Instance)\n    # This would work when export enumeration is implemented\n    for (name, export_item) in exports(instance)\n        export_type = identify_export_type(export_item)\n\n        if export_type == Memory\n            memory = convert_to_memory(export_item, instance.store)\n            println(\"Memory '$name': $(memory_size(memory)) pages\")\n\n        elseif export_type == Global\n            global_var = convert_to_global(export_item, instance.store)\n            value = get_global(global_var)\n            println(\"Global '$name': $value\")\n\n        elseif export_type == Table\n            table = convert_to_table(export_item, instance.store)\n            size = table_size(table)\n            println(\"Table '$name': $size elements\")\n\n        elseif export_type == Func\n            func = convert_to_func(export_item, instance.store)\n            println(\"Function '$name': callable\")\n        end\n    end\nend","category":"page"},{"location":"60-objects/#Advanced-Object-Operations","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Advanced Object Operations","text":"","category":"section"},{"location":"60-objects/#Memory-Mapping-Patterns-(Future-API)","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Memory Mapping Patterns (Future API)","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Safe memory mapping\nfunction with_memory_view(f, memory::Memory, offset::Int32, length::Int32)\n    # Bounds checking\n    current_size = memory_size(memory) * 65536  # Convert pages to bytes\n    if offset + length > current_size\n        throw(BoundsError(\"Memory view out of bounds\"))\n    end\n\n    # Get raw memory pointer\n    data_ptr = LibWasmtime.wasmtime_memory_data(memory.store.context, memory.ptr)\n\n    # Create a view (be careful with GC)\n    try\n        # Create unsafe array view\n        view = unsafe_wrap(Array{UInt8}, data_ptr + offset, length, own=false)\n        return f(view)\n    catch e\n        rethrow(e)\n    end\nend\n\n# Usage\nresult = with_memory_view(memory, 0, 1024) do view\n    # Work with memory as Julia array\n    sum(view)\nend","category":"page"},{"location":"60-objects/#Global-Variable-Patterns","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Global Variable Patterns","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Type-safe global access\nfunction typed_global_get(global_var::Global, ::Type{T}) where T\n    value = get_global(global_var)\n    if value isa WasmValue{T}\n        return value.value\n    else\n        throw(TypeError(\"Global value is not of type $T\"))\n    end\nend\n\nfunction typed_global_set!(global_var::Global, value::T) where T\n    wasm_value = to_wasm(value)\n    set_global!(global_var, wasm_value)\nend\n\n# Usage\ncounter = get_global(instance, \"counter\")\ncurrent_value = typed_global_get(counter, Int32)\ntyped_global_set!(counter, current_value + 1)","category":"page"},{"location":"60-objects/#Table-Management-Patterns","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Table Management Patterns","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Function table management\nfunction add_function_to_table(table::Table, func::Func)::Int32\n    current_size = table_size(table)\n\n    # Grow table by one element\n    prev_size = table_grow!(table, 1, WasmFuncRef(nothing))\n\n    # Set the new function\n    func_ref = WasmFuncRef(func)\n    set_table_element!(table, prev_size, func_ref)\n\n    return prev_size  # Return index of added function\nend\n\n# Call function from table\nfunction call_table_function(table::Table, index::Int32, params...)\n    func_ref = get_table_element(table, index)\n\n    if func_ref isa WasmFuncRef && func_ref.func !== nothing\n        return call(func_ref.func, collect(params))\n    else\n        throw(ArgumentError(\"No function at table index $index\"))\n    end\nend","category":"page"},{"location":"60-objects/#Error-Handling","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Error Handling","text":"","category":"section"},{"location":"60-objects/#Object-Access-Errors","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Object Access Errors","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"function safe_object_access(instance::Instance, name::String, expected_type::Type)\n    try\n        export_item = get_export(instance, name)\n        actual_type = identify_export_type(export_item)\n\n        if actual_type != expected_type\n            throw(TypeError(\"Export '$name' is $actual_type, expected $expected_type\"))\n        end\n\n        return export_item\n    catch e::WasmtimeError\n        if occursin(\"not found\", e.message)\n            throw(KeyError(\"Export '$name' not found\"))\n        else\n            rethrow(e)\n        end\n    end\nend","category":"page"},{"location":"60-objects/#Memory-Safety","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Memory Safety","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"function safe_memory_operation(f, memory::Memory, offset::Int32, length::Int32)\n    current_size_bytes = memory_size(memory) * 65536\n\n    if offset < 0\n        throw(BoundsError(\"Negative offset\"))\n    end\n\n    if length < 0\n        throw(BoundsError(\"Negative length\"))\n    end\n\n    if offset + length > current_size_bytes\n        throw(BoundsError(\"Access beyond memory bounds\"))\n    end\n\n    try\n        return f()\n    catch e\n        @error \"Memory operation failed\" offset=offset length=length exception=e\n        rethrow(e)\n    end\nend","category":"page"},{"location":"60-objects/#Best-Practices","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Best Practices","text":"","category":"section"},{"location":"60-objects/#Object-Lifecycle-Management","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Object Lifecycle Management","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Objects are tied to their store's lifetime\nfunction manage_object_lifecycle()\n    engine = Engine()\n    store = Store(engine)\n    instance = Instance(store, module_obj)\n\n    # Get objects\n    memory = get_memory(instance, \"memory\")\n    global_var = get_global(instance, \"counter\")\n    table = get_table(instance, \"func_table\")\n\n    # Objects remain valid as long as store is valid\n    # No manual cleanup needed\n\n    return (memory, global_var, table)\nend","category":"page"},{"location":"60-objects/#Type-Safety","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Type Safety","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Always check types before operations\nfunction ensure_mutable_global(global_var::Global)\n    type_info = global_type(global_var)\n\n    if !type_info.is_mutable\n        throw(ArgumentError(\"Global is immutable\"))\n    end\n\n    return global_var\nend","category":"page"},{"location":"60-objects/#Performance-Optimization","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"Performance Optimization","text":"","category":"section"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"# Cache frequently accessed objects\nstruct CachedObjects\n    memory::Union{Memory, Nothing}\n    globals::Dict{String, Global}\n    tables::Dict{String, Table}\nend\n\nfunction cache_objects(instance::Instance, names...)\n    cache = CachedObjects(nothing, Dict(), Dict())\n\n    for name in names\n        try\n            export_item = get_export(instance, name)\n            export_type = identify_export_type(export_item)\n\n            if export_type == Memory\n                cache.memory = convert_to_memory(export_item, instance.store)\n            elseif export_type == Global\n                cache.globals[name] = convert_to_global(export_item, instance.store)\n            elseif export_type == Table\n                cache.tables[name] = convert_to_table(export_item, instance.store)\n            end\n        catch e\n            @warn \"Failed to cache object: $name\" exception=e\n        end\n    end\n\n    return cache\nend","category":"page"},{"location":"60-objects/","page":"WebAssembly Objects: Memory, Globals, and Tables","title":"WebAssembly Objects: Memory, Globals, and Tables","text":"WebAssembly objects provide powerful capabilities for data sharing and state management between Julia and WebAssembly code. The type-safe wrappers ensure memory safety while maintaining performance.","category":"page"},{"location":"90-implementation-status/#Implementation-Status","page":"Implementation Status","title":"Implementation Status","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Last Updated: July 3, 2025 Status: Comprehensive implementation tracking","category":"page"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"This document provides a clear overview of what's currently implemented, what's under development, and what's planned for future releases.","category":"page"},{"location":"90-implementation-status/#Legend","page":"Implementation Status","title":"Legend","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Implemented: Feature works as documented\n🚧 Partial: Basic functionality available, but with limitations\n📋 Planned: Future feature, implementation timeline provided\n❌ Not Started: Not yet in development","category":"page"},{"location":"90-implementation-status/#Core-Runtime-Components","page":"Implementation Status","title":"Core Runtime Components","text":"","category":"section"},{"location":"90-implementation-status/#Engine-and-Configuration","page":"Implementation Status","title":"Engine and Configuration","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmEngine creation and management\n✅ WasmConfig with fluent API\n✅ Optimization levels (None, Speed, SpeedAndSize)\n✅ Debug information control\n✅ Profiling strategies configuration\n✅ Resource management (automatic cleanup)","category":"page"},{"location":"90-implementation-status/#Store-Management","page":"Implementation Status","title":"Store Management","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmStore creation and management\n✅ Store isolation and context management\n✅ Fuel consumption tracking (when enabled)\n✅ Epoch deadlines for interruption","category":"page"},{"location":"90-implementation-status/#Module-System","page":"Implementation Status","title":"Module System","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmModule creation from bytes\n✅ WAT to WASM compilation (wat2wasm)\n✅ Module validation (validate function)\n🚧 Export enumeration (returns placeholder data)\n🚧 Import enumeration (returns placeholder data)\n📋 Complete module introspection (Q4 2025)","category":"page"},{"location":"90-implementation-status/#Instance-Management","page":"Implementation Status","title":"Instance Management","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmInstance creation\n✅ Basic instantiation process\n🚧 Instance export access (limited)\n📋 Complete export resolution (Q4 2025)","category":"page"},{"location":"90-implementation-status/#Value-System","page":"Implementation Status","title":"Value System","text":"","category":"section"},{"location":"90-implementation-status/#Value-Types","page":"Implementation Status","title":"Value Types","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmI32, WasmI64 (32/64-bit integers)\n✅ WasmF32, WasmF64 (32/64-bit floats)\n✅ WasmFuncRef (function references)\n✅ WasmExternRef (external references)\n✅ WasmV128 (128-bit SIMD vectors)","category":"page"},{"location":"90-implementation-status/#Type-Conversion","page":"Implementation Status","title":"Type Conversion","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ iswasmconvertible (type validation)\n🚧 towasm/fromwasm (under development)\n📋 Automatic conversion (Q1 2026)","category":"page"},{"location":"90-implementation-status/#WebAssembly-Objects","page":"Implementation Status","title":"WebAssembly Objects","text":"","category":"section"},{"location":"90-implementation-status/#Function-Operations","page":"Implementation Status","title":"Function Operations","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmFunc types and structures\n✅ Function type validation\n❌ Function calling (call, gettypedfunc)\n📋 Function calling API (Q4 2025)\n📋 Multi-value returns (Q1 2026)","category":"page"},{"location":"90-implementation-status/#Memory-Operations","page":"Implementation Status","title":"Memory Operations","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmMemory type definitions\n❌ Memory access (read/write operations)\n❌ Memory growth (grow operations)\n📋 Memory API (Q1 2026)","category":"page"},{"location":"90-implementation-status/#Global-Variables","page":"Implementation Status","title":"Global Variables","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmGlobal type definitions\n❌ Global access (get/set operations)\n❌ Global modification (mutable globals)\n📋 Global API (Q1 2026)","category":"page"},{"location":"90-implementation-status/#Table-Operations","page":"Implementation Status","title":"Table Operations","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmTable type definitions\n❌ Table access (get/set operations)\n❌ Table growth (grow operations)\n📋 Table API (Q1 2026)","category":"page"},{"location":"90-implementation-status/#Error-Handling","page":"Implementation Status","title":"Error Handling","text":"","category":"section"},{"location":"90-implementation-status/#Error-Types","page":"Implementation Status","title":"Error Types","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ WasmtimeError exception type\n✅ Trap handling (WasmTrap)\n✅ Error propagation from C library\n✅ Descriptive error messages","category":"page"},{"location":"90-implementation-status/#Error-Integration","page":"Implementation Status","title":"Error Integration","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Julia exception system integration\n✅ Resource cleanup on errors\n✅ Safe error recovery","category":"page"},{"location":"90-implementation-status/#Utilities-and-Helpers","page":"Implementation Status","title":"Utilities and Helpers","text":"","category":"section"},{"location":"90-implementation-status/#Utility-Functions","page":"Implementation Status","title":"Utility Functions","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ wat2wasm string macro support\n✅ WasmLimits for resource limits\n✅ Vector utilities (WasmVec types)\n✅ Type checking utilities","category":"page"},{"location":"90-implementation-status/#Development-Support","page":"Implementation Status","title":"Development Support","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Debug logging infrastructure\n✅ Resource tracking for development\n✅ Memory safety checks","category":"page"},{"location":"90-implementation-status/#Performance-Features","page":"Implementation Status","title":"Performance Features","text":"","category":"section"},{"location":"90-implementation-status/#Optimization","page":"Implementation Status","title":"Optimization","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Compilation optimization levels\n✅ Engine reuse patterns\n✅ Module caching support\n📋 Function call optimization (when function calling is available)","category":"page"},{"location":"90-implementation-status/#Profiling","page":"Implementation Status","title":"Profiling","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ VTune profiling support\n✅ JIT dump profiling support\n✅ Performance map profiling","category":"page"},{"location":"90-implementation-status/#Development-Timeline","page":"Implementation Status","title":"Development Timeline","text":"","category":"section"},{"location":"90-implementation-status/#Q4-2025-(Priority-Features)","page":"Implementation Status","title":"Q4 2025 (Priority Features)","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Function calling API implementation\nComplete export/import resolution\nModule introspection enhancement\nBasic function performance optimization","category":"page"},{"location":"90-implementation-status/#Q1-2026-(Object-Access)","page":"Implementation Status","title":"Q1 2026 (Object Access)","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Memory access and manipulation\nGlobal variable operations\nTable operations\nMulti-value function returns","category":"page"},{"location":"90-implementation-status/#Q2-2026-(Advanced-Features)","page":"Implementation Status","title":"Q2 2026 (Advanced Features)","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Advanced type conversion system\nWebAssembly component model support\nPerformance optimization tools\nAdvanced debugging features","category":"page"},{"location":"90-implementation-status/#Q3-2026-(Ecosystem)","page":"Implementation Status","title":"Q3 2026 (Ecosystem)","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Integration with Julia package ecosystem\nAdvanced testing frameworks\nPerformance benchmarking tools\nDocumentation and examples expansion","category":"page"},{"location":"90-implementation-status/#Testing-Status","page":"Implementation Status","title":"Testing Status","text":"","category":"section"},{"location":"90-implementation-status/#Test-Coverage","page":"Implementation Status","title":"Test Coverage","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Engine/Store/Config tests\n✅ WAT compilation tests\n✅ Value type tests\n✅ Error handling tests\n✅ Resource management tests\n🚧 Module/Instance tests (partial)\n📋 Function calling tests (when implemented)","category":"page"},{"location":"90-implementation-status/#Test-Infrastructure","page":"Implementation Status","title":"Test Infrastructure","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ CI/CD pipeline integration\n✅ Cross-platform testing\n✅ Memory leak detection\n✅ Performance regression detection","category":"page"},{"location":"90-implementation-status/#User-Experience","page":"Implementation Status","title":"User Experience","text":"","category":"section"},{"location":"90-implementation-status/#Documentation","page":"Implementation Status","title":"Documentation","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Getting started guide (updated)\n✅ Core concepts documentation\n✅ Configuration guide\n✅ Error handling guide\n🚧 API reference (ongoing updates)\n📋 Advanced tutorials (Q4 2025)","category":"page"},{"location":"90-implementation-status/#Examples","page":"Implementation Status","title":"Examples","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"✅ Basic usage examples\n✅ WAT compilation examples\n✅ Configuration examples\n📋 Function calling examples (when available)\n📋 Advanced patterns examples (Q1 2026)","category":"page"},{"location":"90-implementation-status/#Known-Limitations","page":"Implementation Status","title":"Known Limitations","text":"","category":"section"},{"location":"90-implementation-status/#Current-Limitations","page":"Implementation Status","title":"Current Limitations","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Function calling - Not yet implemented\nObject access - Memory, globals, tables not accessible\nModule introspection - Limited to placeholder data\nMulti-value returns - Not supported\nComponent model - Not implemented","category":"page"},{"location":"90-implementation-status/#Performance-Limitations","page":"Implementation Status","title":"Performance Limitations","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"No function call optimization - Cannot optimize calls that don't exist\nLimited caching - Object-level caching not available\nNo specialized paths - Generic paths only","category":"page"},{"location":"90-implementation-status/#API-Limitations","page":"Implementation Status","title":"API Limitations","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Incomplete export resolution - Cannot access individual exports\nNo import satisfaction - Cannot provide imports to modules\nLimited type conversion - Manual conversion only","category":"page"},{"location":"90-implementation-status/#Migration-Path","page":"Implementation Status","title":"Migration Path","text":"","category":"section"},{"location":"90-implementation-status/#When-Function-Calling-is-Available","page":"Implementation Status","title":"When Function Calling is Available","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"# Current (placeholder for planning)\ninstance = WasmInstance(store, module_obj)\n\n# Future (when implemented)\nresult = call(instance, \"function_name\", [arg1, arg2])\ntyped_func = get_typed_func(instance, \"function_name\", [ArgType1, ArgType2], ReturnType)","category":"page"},{"location":"90-implementation-status/#When-Object-Access-is-Available","page":"Implementation Status","title":"When Object Access is Available","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"# Current (not available)\n# memory = get_memory(instance, \"memory\")\n\n# Future (when implemented)\nmemory = get_memory(instance, \"memory\")\ndata = read_memory(memory, 0, 100)","category":"page"},{"location":"90-implementation-status/#Contributing","page":"Implementation Status","title":"Contributing","text":"","category":"section"},{"location":"90-implementation-status/#High-Priority-Areas","page":"Implementation Status","title":"High-Priority Areas","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Function calling implementation\nExport/import resolution\nObject access APIs\nPerformance optimization\nDocumentation examples","category":"page"},{"location":"90-implementation-status/#Development-Guidelines","page":"Implementation Status","title":"Development Guidelines","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Follow the established patterns in existing code\nAdd comprehensive tests for new features\nUpdate documentation with implementation status\nMaintain backward compatibility\nConsider performance implications","category":"page"},{"location":"90-implementation-status/#Conclusion","page":"Implementation Status","title":"Conclusion","text":"","category":"section"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"WasmtimeRuntime.jl has a solid foundation with core runtime components fully implemented. The focus for the next phase is enabling function calling and object access, which will unlock the full potential of WebAssembly integration with Julia.","category":"page"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"The implementation strategy prioritizes:","category":"page"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"Core functionality first (function calling)\nUser experience (complete examples that work)\nPerformance (optimization opportunities)\nAdvanced features (component model, etc.)","category":"page"},{"location":"90-implementation-status/","page":"Implementation Status","title":"Implementation Status","text":"This status document will be updated as features are implemented and timelines are refined.","category":"page"},{"location":"20-values-and-types/#Values-and-Type-System","page":"Values and Type System","title":"Values and Type System","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"WasmtimeRuntime.jl provides a comprehensive type system for WebAssembly values with current implementations and planned future features.","category":"page"},{"location":"20-values-and-types/#WebAssembly-Value-Types","page":"Values and Type System","title":"WebAssembly Value Types","text":"","category":"section"},{"location":"20-values-and-types/#Basic-Value-Types-(-Implemented)","page":"Values and Type System","title":"Basic Value Types (✅ Implemented)","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"WebAssembly defines WasmValue to wrap fundamental value types:","category":"page"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"# 32-bit integer\nval_i32 = WasmValue(42)\n\n# 64-bit integer\nval_i64 = WasmValue(42)\n\n# 32-bit floating point\nval_f32 = WasmValue(3.14f0)\n\n# 64-bit floating point\nval_f64 = WasmValue(3.14159)","category":"page"},{"location":"20-values-and-types/#Reference-Types-(-Implemented)","page":"Values and Type System","title":"Reference Types (✅ Implemented)","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"# Function reference (can be null)\nfunc_ref = WasmFuncRef(nothing)        # Null function reference\nfunc_ref = WasmFuncRef(some_function)  # Valid function reference\n\n# External reference (any Julia object)\nextern_ref = WasmExternRef(\"hello\")    # String reference\nextern_ref = WasmExternRef([1, 2, 3])  # Array reference\nextern_ref = WasmExternRef(nothing)    # Null reference","category":"page"},{"location":"20-values-and-types/#SIMD-Types-(-Under-Development)","page":"Values and Type System","title":"SIMD Types (🚧 Under Development)","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"# 128-bit vector (16 bytes)\nsimd_val = WasmValue((0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08,\n                     0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, 0x10))","category":"page"},{"location":"20-values-and-types/#Type-Conversion-System","page":"Values and Type System","title":"Type Conversion System","text":"","category":"section"},{"location":"20-values-and-types/#Current-Implementation-(-Under-Development)","page":"Values and Type System","title":"Current Implementation (🚧 Under Development)","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"Type checking functionality is currently available:","category":"page"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"# Type validation (implemented)\nis_wasm_convertible(Int32)     # true\nis_wasm_convertible(Int64)     # true\nis_wasm_convertible(Float32)   # true\nis_wasm_convertible(Float64)   # true\nis_wasm_convertible(String)    # false (use ExternRef)\nis_wasm_convertible(Vector)    # false (use ExternRef)","category":"page"},{"location":"20-values-and-types/#Future-API-(-Under-Development)","page":"Values and Type System","title":"Future API (🚧 Under Development)","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"The following conversion functions are planned:","category":"page"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"\n# WebAssembly → Julia\n# julia_val = from_wasm(WasmValue(42))   # Returns 42::Int32\n# julia_val = from_wasm(WasmValue(3.14)) # Returns 3.14::Float64","category":"page"},{"location":"20-values-and-types/#Working-with-Values","page":"Values and Type System","title":"Working with Values","text":"","category":"section"},{"location":"20-values-and-types/#Creating-Values","page":"Values and Type System","title":"Creating Values","text":"","category":"section"},{"location":"20-values-and-types/","page":"Values and Type System","title":"Values and Type System","text":"# Direct construction from Julia values\nval = WasmValue(100)","category":"page"},{"location":"51-memory/#WebAssembly-Memory","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"WebAssembly linear memory is a contiguous, mutable array of raw bytes that serves as the heap for WebAssembly modules. This chapter covers working with memory in WasmtimeRuntime.jl.","category":"page"},{"location":"51-memory/#Overview","page":"WebAssembly Memory","title":"Overview","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"WebAssembly memory is organized into 64KB pages and can be dynamically resized during execution. The WasmtimeRuntime.jl library provides two main types for working with memory:","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"WasmMemoryType: Defines memory characteristics and constraints\nWasmMemory: An actual memory instance within a store","category":"page"},{"location":"51-memory/#Memory-Types","page":"WebAssembly Memory","title":"Memory Types","text":"","category":"section"},{"location":"51-memory/#WasmMemoryType","page":"WebAssembly Memory","title":"WasmMemoryType","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"A WasmMemoryType specifies the properties of a WebAssembly memory:","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"# Create memory type with 1 initial page, up to 10 pages maximum\nmemory_type = WasmMemoryType(1 => 10)\n\n# Create memory type with 5 initial pages, unlimited growth\nmemory_type = WasmMemoryType(5 => 0)\n\n# Default: no initial pages, unlimited growth\nmemory_type = WasmMemoryType()","category":"page"},{"location":"51-memory/#Memory-Limits","page":"WebAssembly Memory","title":"Memory Limits","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"Memory limits are specified as page counts where each page is exactly 64KB (65,536 bytes):","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"Minimum pages: Initial memory size\nMaximum pages: Growth limit (0 means unlimited)","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"# 64KB initial, up to 1MB maximum\nmemory_type = WasmMemoryType(1 => 16)\n\n# 320KB initial, unlimited growth\nmemory_type = WasmMemoryType(5 => 0)","category":"page"},{"location":"51-memory/#Memory-Instances","page":"WebAssembly Memory","title":"Memory Instances","text":"","category":"section"},{"location":"51-memory/#Creating-Memory","page":"WebAssembly Memory","title":"Creating Memory","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"Memory instances are created within a store:","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create memory with specific limits\nmemory = WasmMemory(store, 2 => 100)\n\n# Create default memory\nmemory = WasmMemory(store)","category":"page"},{"location":"51-memory/#Memory-Properties","page":"WebAssembly Memory","title":"Memory Properties","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"# Check if memory is valid\nisvalid(memory)  # returns Bool\n\n# Get string representation\nstring(memory)  # \"WasmMemory()\"","category":"page"},{"location":"53-global/#WebAssembly-Global-Variables","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables in WebAssembly are storage locations that persist for the lifetime of a WebAssembly instance. They can hold a single value of a specific type (Int32, Int64, Float32, or Float64) and can be either mutable or immutable.","category":"page"},{"location":"53-global/#Global-Types","page":"WebAssembly Global Variables","title":"Global Types","text":"","category":"section"},{"location":"53-global/#WasmGlobalType","page":"WebAssembly Global Variables","title":"WasmGlobalType","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Defines the characteristics of a global variable including its value type and mutability.","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Create a mutable Int32 global type\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)  # true = mutable\n\n# Create an immutable Float64 global type\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)  # false = immutable","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Constructor Parameters:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"valtype::WasmValtype: The WebAssembly value type\nmutability::Bool: Whether the global can be modified after creation","category":"page"},{"location":"53-global/#Global-Variables","page":"WebAssembly Global Variables","title":"Global Variables","text":"","category":"section"},{"location":"53-global/#WasmGlobal","page":"WebAssembly Global Variables","title":"WasmGlobal","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Represents an actual global variable instance with a value.","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a mutable counter global\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)\ncounter = WasmGlobal(store, global_type, WasmValue(Int32(0)))\n\n# Create an immutable constant\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)\npi_constant = WasmGlobal(store, global_type, WasmValue(3.14159))","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Constructor Parameters:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"store::WasmStore: The store that owns this global\nglobal_type::WasmGlobalType: Type descriptor defining characteristics\ninitial_value::WasmValue: Starting value for the global","category":"page"},{"location":"53-global/#Supported-Types","page":"WebAssembly Global Variables","title":"Supported Types","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"WebAssembly globals support four primitive types:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Julia Type WebAssembly Type Description\nInt32 i32 32-bit signed integer\nInt64 i64 64-bit signed integer\nFloat32 f32 32-bit floating point\nFloat64 f64 64-bit floating point","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Examples for each type\nint32_global = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), true), WasmValue(Int32(42)))\nint64_global = WasmGlobal(store, WasmGlobalType(WasmValType(Int64), true), WasmValue(Int64(1000)))\nfloat32_global = WasmGlobal(store, WasmGlobalType(WasmValType(Float32), true), WasmValue(Float32(2.718)))\nfloat64_global = WasmGlobal(store, WasmGlobalType(WasmValType(Float64), true), WasmValue(3.14159))","category":"page"},{"location":"53-global/#Mutability","page":"WebAssembly Global Variables","title":"Mutability","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables can be either mutable or immutable:","category":"page"},{"location":"53-global/#Mutable-Globals","page":"WebAssembly Global Variables","title":"Mutable Globals","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Can be modified after creation\nvaltype = WasmValType(Int32)\nmutable_type = WasmGlobalType(valtype, true)  # true = mutable\ncounter = WasmGlobal(store, mutable_type, WasmValue(Int32(0)))","category":"page"},{"location":"53-global/#Immutable-Globals","page":"WebAssembly Global Variables","title":"Immutable Globals","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Cannot be modified after creation\nvaltype = WasmValType(Float64)\nimmutable_type = WasmGlobalType(valtype, false)  # false = immutable\nconstant = WasmGlobal(store, immutable_type, WasmValue(3.14159))","category":"page"},{"location":"53-global/#Common-Usage-Patterns","page":"WebAssembly Global Variables","title":"Common Usage Patterns","text":"","category":"section"},{"location":"53-global/#Application-Configuration","page":"WebAssembly Global Variables","title":"Application Configuration","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Store application constants as immutable globals\ndebug_mode = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), false),\n    WasmValue(Int32(1)))  # 1 = debug on\n\nmax_iterations = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), false),\n    WasmValue(Int32(1000)))","category":"page"},{"location":"53-global/#Runtime-State","page":"WebAssembly Global Variables","title":"Runtime State","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Track mutable runtime state\nframe_counter = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int64), true),\n    WasmValue(Int64(0)))\n\nlast_error_code = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), true),\n    WasmValue(Int32(0)))","category":"page"},{"location":"53-global/#Mathematical-Constants","page":"WebAssembly Global Variables","title":"Mathematical Constants","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Store frequently used mathematical constants\npi = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Float64), false),\n    WasmValue(3.141592653589793))\n\ne = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Float64), false),\n    WasmValue(2.718281828459045))","category":"page"},{"location":"53-global/#Resource-Management","page":"WebAssembly Global Variables","title":"Resource Management","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables automatically manage their memory through Julia's finalizer system:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Resources are automatically cleaned up\nfunction create_globals()\n    engine = WasmEngine()\n    store = WasmStore(engine)\n\n    valtype = WasmValType(Int32)\n    global_type = WasmGlobalType(valtype, true)\n    global_var = WasmGlobal(store, global_type, WasmValue(Int32(42)))\n\n    return global_var\nend\n\nglobal_var = create_globals()\n# When global_var goes out of scope, memory is automatically freed","category":"page"},{"location":"53-global/#Error-Handling","page":"WebAssembly Global Variables","title":"Error Handling","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Common errors when working with globals:","category":"page"},{"location":"53-global/#Invalid-Value-Type","page":"WebAssembly Global Variables","title":"Invalid Value Type","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Error: Using an invalid WasmValtype\nvaltype = WasmValType(Int32)\nvaltype.ptr = C_NULL  # Simulate corruption\n# This will throw ArgumentError(\"Invalid WasmValtype\")\nglobal_type = WasmGlobalType(valtype, true)","category":"page"},{"location":"53-global/#Invalid-Store-or-Type","page":"WebAssembly Global Variables","title":"Invalid Store or Type","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\nstore.ptr = C_NULL  # Simulate corruption\n\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)\n# This will throw ArgumentError(\"Invalid store or global type\")\nglobal_var = WasmGlobal(store, global_type, WasmValue(Int32(42)))","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"<!– ### Invalid Initial Value","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"initial_value = WasmValue(Int32(42))\ninitial_value.ptr = C_NULL  # Simulate corruption\n# This will throw ArgumentError(\"Invalid initial value for global\")\nglobal_var = WasmGlobal(store, global_type, initial_value)","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"–>","category":"page"},{"location":"53-global/#Best-Practices","page":"WebAssembly Global Variables","title":"Best Practices","text":"","category":"section"},{"location":"53-global/#1.-Use-Descriptive-Names","page":"WebAssembly Global Variables","title":"1. Use Descriptive Names","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Good: Clear purpose\nmax_retry_count = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), false), WasmValue(Int32(3)))\n\n# Avoid: Unclear purpose\nx = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), false), WasmValue(Int32(3)))","category":"page"},{"location":"53-global/#2.-Choose-Appropriate-Mutability","page":"WebAssembly Global Variables","title":"2. Choose Appropriate Mutability","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Immutable for constants\nPI = WasmGlobal(store, WasmGlobalType(WasmValType(Float64), false), WasmValue(3.14159))\n\n# Mutable for runtime state\nrequest_count = WasmGlobal(store, WasmGlobalType(WasmValType(Int64), true), WasmValue(Int64(0)))","category":"page"},{"location":"53-global/#3.-Initialize-with-Sensible-Defaults","page":"WebAssembly Global Variables","title":"3. Initialize with Sensible Defaults","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Initialize counters to zero\ncounter = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), true), WasmValue(Int32(0)))\n\n# Initialize flags to false (0)\nerror_flag = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), true), WasmValue(Int32(0)))","category":"page"},{"location":"53-global/#4.-Group-Related-Globals","page":"WebAssembly Global Variables","title":"4. Group Related Globals","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Create related globals together for better organization\nfunction create_math_constants(store)\n    float_type = WasmGlobalType(WasmValType(Float64), false)\n\n    return (\n        pi = WasmGlobal(store, float_type, WasmValue(π)),\n        e = WasmGlobal(store, float_type, WasmValue(ℯ)),\n        golden_ratio = WasmGlobal(store, float_type, WasmValue(1.618033988749))\n    )\nend","category":"page"},{"location":"53-global/#Integration-with-WebAssembly-Modules","page":"WebAssembly Global Variables","title":"Integration with WebAssembly Modules","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables can be imported from or exported to WebAssembly modules:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Globals created in Julia can be passed to WebAssembly instances\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a global that WebAssembly can access\nshared_counter = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), true),\n    WasmValue(Int32(0)))\n\n# This global can then be used when instantiating WebAssembly modules\n# (specific integration depends on module imports/exports)","category":"page"},{"location":"53-global/#Performance-Considerations","page":"WebAssembly Global Variables","title":"Performance Considerations","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Type Selection: Choose the smallest appropriate type (Int32 vs Int64, Float32 vs Float64)\nMutability: Immutable globals may allow for better optimization\nInitialization: Initialize globals with their expected initial values to avoid unnecessary updates","category":"page"},{"location":"10-configuration/#Configuration-Guide","page":"Configuration Guide","title":"Configuration Guide","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"This guide covers comprehensive configuration of the Wasmtime engine for optimal performance and debugging.","category":"page"},{"location":"10-configuration/#Basic-Configuration","page":"Configuration Guide","title":"Basic Configuration","text":"","category":"section"},{"location":"10-configuration/#Default-Configuration","page":"Configuration Guide","title":"Default Configuration","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"using WasmtimeRuntime\n\n# Default configuration\nconfig = WasmConfig()\nengine = WasmEngine(config)","category":"page"},{"location":"10-configuration/#Keyword-Constructor","page":"Configuration Guide","title":"Keyword Constructor","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"config = WasmConfig(\n    debug_info = true,\n    optimization_level = Speed,\n    profiling_strategy = NoProfilingStrategy,\n    consume_fuel = false,\n    epoch_interruption = false,\n    max_wasm_stack = 1024 * 1024  # 1MB\n)","category":"page"},{"location":"10-configuration/#Configuration-Options","page":"Configuration Guide","title":"Configuration Options","text":"","category":"section"},{"location":"10-configuration/#Debug-Information","page":"Configuration Guide","title":"Debug Information","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Enable debug information for better error messages and debugging:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"config = WasmConfig()\ndebug_info!(config, true)","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Debug info includes:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Source line mappings\nFunction names\nLocal variable information","category":"page"},{"location":"10-configuration/#Optimization-Levels","page":"Configuration Guide","title":"Optimization Levels","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Control compilation optimization:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"# No optimization (fastest compilation)\noptimization_level!(config, None)\n\n# Speed optimization (balanced)\noptimization_level!(config, Speed)\n\n# Size and speed optimization (slowest compilation)\noptimization_level!(config, SpeedAndSize)","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Optimization Level Trade-offs:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"None: Fast compilation, slower execution\nSpeed: Balanced compilation and execution speed\nSpeedAndSize: Slower compilation, fastest execution","category":"page"},{"location":"10-configuration/#Profiling","page":"Configuration Guide","title":"Profiling","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Enable profiling for performance analysis:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"# No profiling (default)\nprofiler!(config, NoProfilingStrategy)\n\n# JIT dump profiling (Linux perf)\nprofiler!(config, JitdumpProfilingStrategy)\n\n# VTune profiling (Intel VTune)\nprofiler!(config, VTuneProfilingStrategy)\n\n# Performance map profiling\nprofiler!(config, PerfMapProfilingStrategy)","category":"page"},{"location":"10-configuration/#Resource-Limits","page":"Configuration Guide","title":"Resource Limits","text":"","category":"section"},{"location":"10-configuration/#Fuel-Consumption","page":"Configuration Guide","title":"Fuel Consumption","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Limit execution time by tracking \"fuel\":","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"# Enable fuel consumption\nconsume_fuel!(config, true)\nengine = WasmEngine(config)\nstore = Store(engine)\n\n# Add fuel\nadd_fuel!(store, 10000)\n\n# Check consumed fuel\nconsumed = fuel_consumed(store)","category":"page"},{"location":"10-configuration/#Stack-Limits","page":"Configuration Guide","title":"Stack Limits","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Control WebAssembly stack size:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"# Set maximum stack size (1MB)\nmax_wasm_stack!(config, 1024 * 1024)","category":"page"},{"location":"10-configuration/#Epoch-Interruption","page":"Configuration Guide","title":"Epoch Interruption","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Enable epoch-based interruption for long-running computations:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"# Enable epoch interruption\nepoch_interruption!(config, true)\nengine = WasmEngine(config)\nstore = Store(engine)\n\n# Set epoch deadline\nset_epoch_deadline!(store, 1000)  # 1000 ticks","category":"page"},{"location":"10-configuration/#Method-Chaining","page":"Configuration Guide","title":"Method Chaining","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Configuration methods return the config object for chaining:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"config = WasmConfig()\n    |> c -> debug_info!(c, true)\n    |> c -> optimization_level!(c, Speed)\n    |> c -> consume_fuel!(c, true)\n    |> c -> max_wasm_stack!(c, 2 * 1024 * 1024)\n\nengine = WasmEngine(config)","category":"page"},{"location":"10-configuration/#Common-Configuration-Patterns","page":"Configuration Guide","title":"Common Configuration Patterns","text":"","category":"section"},{"location":"10-configuration/#Development-Configuration","page":"Configuration Guide","title":"Development Configuration","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Optimal for development and debugging:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"dev_config = Config(\n    debug_info = true,\n    optimization_level = None,  # Fast compilation\n    consume_fuel = true,        # Prevent infinite loops\n    max_wasm_stack = 512 * 1024\n)","category":"page"},{"location":"10-configuration/#Production-Configuration","page":"Configuration Guide","title":"Production Configuration","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Optimal for production performance:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"prod_config = Config(\n    debug_info = false,\n    optimization_level = SpeedAndSize,\n    consume_fuel = false,\n    epoch_interruption = true,  # For long-running tasks\n    max_wasm_stack = 4 * 1024 * 1024\n)","category":"page"},{"location":"10-configuration/#Profiling-Configuration","page":"Configuration Guide","title":"Profiling Configuration","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"For performance analysis:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"profile_config = Config(\n    debug_info = true,\n    optimization_level = Speed,\n    profiling_strategy = VTuneProfilingStrategy,\n    consume_fuel = true\n)","category":"page"},{"location":"10-configuration/#Configuration-Validation","page":"Configuration Guide","title":"Configuration Validation","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Configurations are validated when creating engines:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"config = WasmConfig()\nconfig.ptr = C_NULL  # Invalid configuration\n\ntry\n    engine = WasmEngine(config)  # Throws WasmtimeError\ncatch e::WasmtimeError\n    println(\"Invalid configuration: $(e.message)\")\nend","category":"page"},{"location":"10-configuration/#Environment-Specific-Settings","page":"Configuration Guide","title":"Environment-Specific Settings","text":"","category":"section"},{"location":"10-configuration/#Resource-Constrained-Environments","page":"Configuration Guide","title":"Resource-Constrained Environments","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"minimal_config = Config(\n    debug_info = false,\n    optimization_level = None,\n    consume_fuel = true,\n    max_wasm_stack = 128 * 1024  # 128KB\n)","category":"page"},{"location":"10-configuration/#High-Performance-Computing","page":"Configuration Guide","title":"High-Performance Computing","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"hpc_config = Config(\n    debug_info = false,\n    optimization_level = SpeedAndSize,\n    consume_fuel = false,\n    max_wasm_stack = 16 * 1024 * 1024  # 16MB\n)","category":"page"},{"location":"10-configuration/#Configuration-Lifecycle","page":"Configuration Guide","title":"Configuration Lifecycle","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Configurations are consumed when creating engines:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"config = WasmConfig()\ndebug_info!(config, true)\n\nengine = WasmEngine(config)\n# config is now consumed and cannot be reused\n\n# This would throw an error:\n# engine2 = WasmEngine(config)  # Error: config already consumed","category":"page"},{"location":"10-configuration/#Best-Practices","page":"Configuration Guide","title":"Best Practices","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Create configurations once per application lifecycle\nShare engines across multiple stores when possible\nEnable fuel consumption during development to catch infinite loops\nUse appropriate optimization levels based on deployment needs\nSet reasonable stack limits to prevent memory exhaustion\nEnable debug info only when needed (impacts performance)","category":"page"},{"location":"10-configuration/#Troubleshooting","page":"Configuration Guide","title":"Troubleshooting","text":"","category":"section"},{"location":"10-configuration/#Common-Configuration-Errors","page":"Configuration Guide","title":"Common Configuration Errors","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"# Invalid configuration usage\nconfig = WasmConfig()\nengine1 = WasmEngine(config)\n# engine2 = WasmEngine(config)  # Error: consumed config\n\n# Solution: Create new config\nconfig2 = WasmConfig()\nengine2 = Engine(config2)","category":"page"},{"location":"10-configuration/#Performance-Issues","page":"Configuration Guide","title":"Performance Issues","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"If WebAssembly execution is slow:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Check optimization level (use SpeedAndSize for production)\nDisable debug info in production\nVerify fuel consumption isn't enabled unnecessarily\nIncrease stack size if needed","category":"page"},{"location":"10-configuration/#Memory-Issues","page":"Configuration Guide","title":"Memory Issues","text":"","category":"section"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"If running out of memory:","category":"page"},{"location":"10-configuration/","page":"Configuration Guide","title":"Configuration Guide","text":"Reduce max_wasm_stack size\nEnable fuel consumption to limit execution\nUse epoch interruption for long-running tasks\nMonitor store lifetime and cleanup","category":"page"},{"location":"54-externs/#WebAssembly-Externs","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"WebAssembly externs provide a unified interface for handling functions, globals, tables, and memories as generic external objects. This is essential for import/export operations and module instantiation.","category":"page"},{"location":"54-externs/#Overview","page":"WebAssembly Externs","title":"Overview","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"The WasmExtern wrapper converts specific WebAssembly objects into the generic wasm_extern_t representation used by the Wasmtime C API. This allows different object types to be handled uniformly in contexts like module imports and exports.","category":"page"},{"location":"54-externs/#Core-Types","page":"WebAssembly Externs","title":"Core Types","text":"","category":"section"},{"location":"54-externs/#WasmExternObjectType","page":"WebAssembly Externs","title":"WasmExternObjectType","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"WasmExternObjectType = Union{WasmFunc,WasmGlobal,WasmTable,WasmMemory}","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Union type defining all WebAssembly extern objects that can be wrapped by WasmExtern.","category":"page"},{"location":"54-externs/#WasmExtern","page":"WebAssembly Externs","title":"WasmExtern","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"WasmExtern{E<:WasmExternObjectType} <: AbstractWasmExtern","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Generic wrapper for WebAssembly extern objects with parameterized type information.","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"<!– Important: The original object is finalized when creating the WasmExtern wrapper, as ownership transfers to the wrapper. The original object should not be used after creating the WasmExtern. –>","category":"page"},{"location":"54-externs/#Constructor","page":"WebAssembly Externs","title":"Constructor","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"WasmExtern(obj::WasmExternObjectType)","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Creates a WasmExtern wrapper around a specific extern object. The constructor:","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Validates the input object using isvalid(obj)\nConverts the object using the appropriate _as_extern C API function\nValidates the conversion succeeded\nReturns the wrapped extern object","category":"page"},{"location":"54-externs/#Usage-Examples","page":"WebAssembly Externs","title":"Usage Examples","text":"","category":"section"},{"location":"54-externs/#Memory-Extern","page":"WebAssembly Externs","title":"Memory Extern","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create and wrap a memory object\nmemory = WasmMemory(store, (1 => 10))  # 1 page minimum, 10 pages maximum\nmemory_extern = WasmExtern(memory)\n\n# Use in import/export operations\n@assert isvalid(memory_extern)","category":"page"},{"location":"54-externs/#Function-Extern","page":"WebAssembly Externs","title":"Function Extern","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"# Create a function and wrap it as extern\nfunction my_func(a::Int32, b::Int32)::Int32\n    return a + b\nend\nwasm_func = WasmFunc(store, my_func)\n\nfunc_extern = WasmExtern(wasm_func)","category":"page"},{"location":"54-externs/#Table-Extern","page":"WebAssembly Externs","title":"Table Extern","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"# Create a table and wrap it as extern\ntable_type = WasmTableType((1 => 10))\ntable = WasmTable(store, table_type)\ntable_extern = WasmExtern(table)","category":"page"},{"location":"54-externs/#Global-Extern","page":"WebAssembly Externs","title":"Global Extern","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"# Create a global and wrap it as extern (when implemented)\nglobal_type = WasmGlobalType(WasmValType(Int32), false)  # immutable\nglobal_ = WasmGlobal(store, global_type, WasmValue(Int32(42)))\nglobal_extern = WasmExtern(global_)","category":"page"},{"location":"54-externs/#Type-Safety","page":"WebAssembly Externs","title":"Type Safety","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"The WasmExtern struct is parameterized by the original object type:","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"memory_extern::WasmExtern{WasmMemory}\nfunc_extern::WasmExtern{WasmFunc}\ntable_extern::WasmExtern{WasmTable}\nglobal_extern::WasmExtern{WasmGlobal}","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"This maintains type information for compile-time safety while providing runtime flexibility.","category":"page"},{"location":"54-externs/#Common-Operations","page":"WebAssembly Externs","title":"Common Operations","text":"","category":"section"},{"location":"54-externs/#Validity-Checking","page":"WebAssembly Externs","title":"Validity Checking","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"extern = WasmExtern(memory)\n@assert isvalid(extern)  # Check if extern is valid","category":"page"},{"location":"54-externs/#Conversion-to-C-API","page":"WebAssembly Externs","title":"Conversion to C API","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"# Automatic conversion for C API calls\nc_ptr = Base.unsafe_convert(Ptr{LibWasmtime.wasm_extern_t}, extern)","category":"page"},{"location":"54-externs/#Display","page":"WebAssembly Externs","title":"Display","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"extern = WasmExtern(memory)\nprintln(extern)  # Prints: WasmExtern()","category":"page"},{"location":"54-externs/#Error-Handling","page":"WebAssembly Externs","title":"Error Handling","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"The WasmExtern constructor performs validation and throws ArgumentError for:","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Invalid input objects (!isvalid(obj))\nUnsupported object types\nFailed C API conversions (resulting in C_NULL)","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"try\n    extern = WasmExtern(invalid_object)\ncatch e\n    @error \"Failed to create extern: $(e.msg)\"\nend","category":"page"},{"location":"54-externs/#Memory-Management","page":"WebAssembly Externs","title":"Memory Management","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Critical: The original object is finalized when creating the WasmExtern wrapper. This means:","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"memory = WasmMemory(store, (1 => 10))\nextern = WasmExtern(memory)\n\n# ❌ Don't use 'memory' after this point\n# ✅ Use 'extern' instead","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"The WasmExtern wrapper takes ownership and manages the lifetime of the underlying C object.","category":"page"},{"location":"54-externs/#Best-Practices","page":"WebAssembly Externs","title":"Best Practices","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Create externs immediately before use: Don't hold onto the original objects\nValidate objects: Always check isvalid() before creating externs\nHandle errors gracefully: Wrap extern creation in try-catch blocks\nUse type parameters: Leverage the parameterized type for better type safety","category":"page"},{"location":"54-externs/#Integration-with-Other-Components","page":"WebAssembly Externs","title":"Integration with Other Components","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Externs integrate with:","category":"page"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Modules: For import/export specifications\nInstances: For providing import values\nStores: All extern objects are associated with a store\nTypes: Each extern has an associated type (function, global, table, memory)","category":"page"},{"location":"54-externs/#Implementation-Notes","page":"WebAssembly Externs","title":"Implementation Notes","text":"","category":"section"},{"location":"54-externs/","page":"WebAssembly Externs","title":"WebAssembly Externs","text":"Each extern type uses its specific _as_extern C API function\nThe wrapper maintains the original type information through parameterization\nConversion to C API pointers is automatic via Base.unsafe_convert\nThe struct is mutable to allow for potential future extensions","category":"page"},{"location":"80-performance/#Performance-Guide","page":"Performance Guide","title":"Performance Guide","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"This guide covers performance optimization techniques for WasmtimeRuntime.jl, focusing on currently implemented features and configuration options.","category":"page"},{"location":"80-performance/#Engine-Configuration-for-Performance-(-Working)","page":"Performance Guide","title":"Engine Configuration for Performance (✅ Working)","text":"","category":"section"},{"location":"80-performance/#Optimization-Levels","page":"Performance Guide","title":"Optimization Levels","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Choose the right optimization level for your use case:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# Development: Fast compilation, slower execution\ndev_config = WasmConfig(optimization_level = None)\n\n# Balanced: Good compromise between compilation time and execution speed\nbalanced_config = WasmConfig(optimization_level = Speed)\n\n# Production: Slower compilation, fastest execution\nprod_config = WasmConfig(optimization_level = SpeedAndSize)","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Performance Impact:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"None: ~10x faster compilation, ~3-5x slower execution\nSpeed: Balanced performance\nSpeedAndSize: ~3-5x slower compilation, optimal execution speed","category":"page"},{"location":"80-performance/#Debug-Information-Impact","page":"Performance Guide","title":"Debug Information Impact","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Debug information affects both compilation time and memory usage:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# Production configuration - no debug info\nprod_config = WasmConfig(\n    debug_info = false,\n    optimization_level = SpeedAndSize\n)\n\n# Development configuration - with debug info\ndev_config = WasmConfig(\n    debug_info = true,\n    optimization_level = None\n)","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Impact: Debug info can increase:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Compilation time by 20-30%\nMemory usage by 15-25%\nBinary size by 30-50%","category":"page"},{"location":"80-performance/#Profiling-Configuration","page":"Performance Guide","title":"Profiling Configuration","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Enable profiling only when needed:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# Production without profiling\nconfig = WasmConfig(profiling_strategy = NoProfilingStrategy)\n\n# Performance analysis with profiling\nprofile_config = WasmConfig(\n    profiling_strategy = VTuneProfilingStrategy,\n    optimization_level = Speed  # Don't use None with profiling\n)","category":"page"},{"location":"80-performance/#Resource-Management-Optimization-(-Working)","page":"Performance Guide","title":"Resource Management Optimization (✅ Working)","text":"","category":"section"},{"location":"80-performance/#Engine-Reuse","page":"Performance Guide","title":"Engine Reuse","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Engines are expensive to create but cheap to share:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# ❌ Inefficient: Creating engines repeatedly\nfunction bad_pattern()\n    for i in 1:100\n        engine = WasmEngine()  # Expensive!\n        store = WasmStore(engine)\n        # ... use store\n    end\nend\n\n# ✅ Efficient: Reuse engine\nfunction good_pattern()\n    engine = WasmEngine()  # Create once\n    for i in 1:100\n        store = WasmStore(engine)  # Cheap!\n        # ... use store\n    end\nend","category":"page"},{"location":"80-performance/#Module-Caching","page":"Performance Guide","title":"Module Caching","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Compile modules once, instantiate many times:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# ✅ Efficient module management\nstruct ModuleCache\n    engine::WasmEngine\n    modules::Dict{String, WasmModule}\nend\n\nfunction get_module(cache::ModuleCache, path::String)\n    if !haskey(cache.modules, path)\n        wasm_bytes = read(path)\n        cache.modules[path] = WasmModule(cache.engine, wasm_bytes)\n    end\n    return cache.modules[path]\nend\n\n# Usage\ncache = ModuleCache(WasmEngine(), Dict())\nmodule1 = get_module(cache, \"module.wasm\")  # Compiles\nmodule2 = get_module(cache, \"module.wasm\")  # Cache hit!","category":"page"},{"location":"80-performance/#Store-Lifecycle-Management","page":"Performance Guide","title":"Store Lifecycle Management","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Optimize store creation patterns:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# ✅ Batch operations per store\nfunction batch_operations(engine, module_obj, operations)\n    store = WasmStore(engine)\n    instance = WasmInstance(store, module_obj)\n\n    # Note: Function calling not yet implemented\n    # This demonstrates the intended optimization pattern\n    # when function calling becomes available\n\n    return instance\n    # Store and instance cleaned up automatically\nend\n\n# ❌ One store per operation (inefficient when function calling is available)\nfunction inefficient_operations(engine, module_obj, operations)\n    results = []\n    for op in operations\n        store = WasmStore(engine)  # Expensive per operation!\n        instance = WasmInstance(store, module_obj)\n        # result = call(instance, op.func_name, op.params)  # Future API\n        # push!(results, result)\n    end\n    return results\nend","category":"page"},{"location":"80-performance/#Function-Call-Optimization-(-Coming-Soon)","page":"Performance Guide","title":"Function Call Optimization (📋 Coming Soon)","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"⚠️ Note: Function calling functionality is under development. Performance guidance will be added when implemented.","category":"page"},{"location":"80-performance/#Type-Safe-Function-Calls","page":"Performance Guide","title":"Type-Safe Function Calls","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Use typed functions for better performance:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# ✅ Type-safe calls (faster)\nadd_func = TypedFunc{Tuple{Int32, Int32}, Int32}(func)\nresult = call(add_func, Int32(1), Int32(2))\n\n# ❌ Generic calls with type conversion (slower)\nresult = call(instance, \"add\", [1, 2])  # Requires type inference and conversion","category":"page"},{"location":"80-performance/#Batch-Parameter-Conversion","page":"Performance Guide","title":"Batch Parameter Conversion","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Pre-convert parameters for repeated calls:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# ✅ Efficient batch processing\nfunction batch_process_optimized(instance, func_name, param_sets)\n    func = get_func(instance, func_name)\n\n    # Pre-convert all parameters\n    converted_params = [\n        [to_wasm(p) for p in params]\n        for params in param_sets\n    ]\n\n    # Efficient calls with pre-converted parameters\n    return [call(func, params) for params in converted_params]\nend\n\n# ❌ Convert parameters on each call\nfunction batch_process_slow(instance, func_name, param_sets)\n    return [call(instance, func_name, params) for params in param_sets]\nend","category":"page"},{"location":"80-performance/#Memory-Management-Performance","page":"Performance Guide","title":"Memory Management Performance","text":"","category":"section"},{"location":"80-performance/#Memory-Layout-Optimization","page":"Performance Guide","title":"Memory Layout Optimization","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Optimize memory access patterns:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# ✅ Sequential memory access (cache-friendly)\nfunction process_memory_sequential(memory, start_offset, count)\n    for i in 0:count-1\n        offset = start_offset + i * 4  # 4 bytes per item\n        # Process memory at offset\n    end\nend\n\n# ❌ Random memory access (cache-unfriendly)\nfunction process_memory_random(memory, offsets)\n    for offset in shuffle(offsets)  # Random order\n        # Process memory at offset\n    end\nend","category":"page"},{"location":"80-performance/#Stack-Size-Optimization","page":"Performance Guide","title":"Stack Size Optimization","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Configure appropriate stack sizes:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# For recursive algorithms\nlarge_stack_config = Config(max_wasm_stack = 4 * 1024 * 1024)  # 4MB\n\n# For simple computations\nsmall_stack_config = Config(max_wasm_stack = 256 * 1024)       # 256KB\n\n# Memory-constrained environments\nminimal_stack_config = Config(max_wasm_stack = 64 * 1024)      # 64KB","category":"page"},{"location":"80-performance/#Concurrent-Execution-Patterns","page":"Performance Guide","title":"Concurrent Execution Patterns","text":"","category":"section"},{"location":"80-performance/#Engine-Sharing-Across-Threads","page":"Performance Guide","title":"Engine Sharing Across Threads","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# Shared engine, per-thread stores\nconst SHARED_ENGINE = Engine(Config(optimization_level = SpeedAndSize))\n\nfunction parallel_wasm_execution(module_path, operations)\n    module_obj = WasmModule(SHARED_ENGINE, module_path)\n\n    # Use ThreadsX for parallel execution\n    results = ThreadsX.map(operations) do op\n        # Each thread gets its own store\n        store = Store(SHARED_ENGINE)\n        instance = Instance(store, module_obj)\n        return call(instance, op.func_name, op.params)\n    end\n\n    return results\nend","category":"page"},{"location":"80-performance/#Thread-Local-Storage-Pattern","page":"Performance Guide","title":"Thread-Local Storage Pattern","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# Thread-local caches for better performance\nconst THREAD_LOCAL_CACHE = Dict{Int, ModuleCache}()\n\nfunction get_thread_cache()\n    tid = Threads.threadid()\n    if !haskey(THREAD_LOCAL_CACHE, tid)\n        THREAD_LOCAL_CACHE[tid] = ModuleCache(SHARED_ENGINE, Dict())\n    end\n    return THREAD_LOCAL_CACHE[tid]\nend","category":"page"},{"location":"80-performance/#Fuel-and-Resource-Limiting","page":"Performance Guide","title":"Fuel and Resource Limiting","text":"","category":"section"},{"location":"80-performance/#Smart-Fuel-Management","page":"Performance Guide","title":"Smart Fuel Management","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Balance security and performance:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# High-performance configuration (no fuel)\nperf_config = Config(consume_fuel = false)\n\n# Secure configuration with fuel limiting\nsecure_config = Config(consume_fuel = true)\n\nfunction adaptive_fuel_management(store, estimated_complexity)\n    if estimated_complexity > 1000\n        # Complex operation: add more fuel\n        add_fuel!(store, 100000)\n    else\n        # Simple operation: minimal fuel\n        add_fuel!(store, 10000)\n    end\nend","category":"page"},{"location":"80-performance/#Epoch-Based-Interruption","page":"Performance Guide","title":"Epoch-Based Interruption","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"For long-running tasks:","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"# Enable epoch interruption for responsiveness\nresponsive_config = Config(\n    epoch_interruption = true,\n    consume_fuel = false  # Use epochs instead of fuel\n)\n\nfunction long_running_computation(store, instance)\n    # Set reasonable epoch deadline\n    set_epoch_deadline!(store, 1000)  # Allow 1000 epoch ticks\n\n    try\n        return call(instance, \"long_computation\", [])\n    catch e::WasmtimeError\n        if occursin(\"epoch\", lowercase(e.message))\n            @warn \"Computation interrupted by epoch deadline\"\n            return nothing\n        else\n            rethrow(e)\n        end\n    end\nend","category":"page"},{"location":"80-performance/#Performance-Monitoring","page":"Performance Guide","title":"Performance Monitoring","text":"","category":"section"},{"location":"80-performance/#Timing-Measurements","page":"Performance Guide","title":"Timing Measurements","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"function benchmark_wasm_call(instance, func_name, params, iterations=1000)\n    # Warmup\n    for _ in 1:10\n        call(instance, func_name, params)\n    end\n\n    # Benchmark\n    times = Float64[]\n    for _ in 1:iterations\n        start_time = time_ns()\n        call(instance, func_name, params)\n        end_time = time_ns()\n        push!(times, (end_time - start_time) / 1e9)  # Convert to seconds\n    end\n\n    return (\n        mean = sum(times) / length(times),\n        min = minimum(times),\n        max = maximum(times),\n        std = sqrt(sum((t - sum(times)/length(times))^2 for t in times) / length(times))\n    )\nend","category":"page"},{"location":"80-performance/#Memory-Usage-Monitoring","page":"Performance Guide","title":"Memory Usage Monitoring","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"function monitor_memory_usage(f)\n    gc_before = GC.gc_num()\n    memory_before = Sys.total_memory()\n\n    result = f()\n\n    GC.gc()  # Force garbage collection\n    gc_after = GC.gc_num()\n    memory_after = Sys.total_memory()\n\n    return (\n        result = result,\n        gc_runs = gc_after.poolalloc - gc_before.poolalloc,\n        memory_delta = memory_after - memory_before\n    )\nend","category":"page"},{"location":"80-performance/#Performance-Profiling-Integration","page":"Performance Guide","title":"Performance Profiling Integration","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"using Profile\n\nfunction profile_wasm_execution(instance, func_name, params)\n    # Clear previous profiles\n    Profile.clear()\n\n    # Profile the execution\n    @profile begin\n        for _ in 1:100\n            call(instance, func_name, params)\n        end\n    end\n\n    # Print profile results\n    Profile.print()\nend","category":"page"},{"location":"80-performance/#Optimization-Techniques","page":"Performance Guide","title":"Optimization Techniques","text":"","category":"section"},{"location":"80-performance/#Instance-Pooling","page":"Performance Guide","title":"Instance Pooling","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"mutable struct InstancePool\n    engine::Engine\n    module_obj::WasmModule\n    available::Channel{Instance}\n    max_size::Int\n    current_size::Int\nend\n\nfunction InstancePool(engine, module_obj, max_size=10)\n    return InstancePool(\n        engine,\n        module_obj,\n        Channel{Instance}(max_size),\n        max_size,\n        0\n    )\nend\n\nfunction borrow_instance(pool::InstancePool)\n    if isready(pool.available)\n        return take!(pool.available)\n    elseif pool.current_size < pool.max_size\n        pool.current_size += 1\n        store = Store(pool.engine)\n        return Instance(store, pool.module_obj)\n    else\n        # Block until instance available\n        return take!(pool.available)\n    end\nend\n\nfunction return_instance(pool::InstancePool, instance::Instance)\n    put!(pool.available, instance)\nend\n\n# Usage with do-block for automatic return\nfunction with_pooled_instance(f, pool::InstancePool)\n    instance = borrow_instance(pool)\n    try\n        return f(instance)\n    finally\n        return_instance(pool, instance)\n    end\nend","category":"page"},{"location":"80-performance/#JIT-Warmup-Strategy","page":"Performance Guide","title":"JIT Warmup Strategy","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"function warmup_module(instance, exported_functions)\n    @info \"Warming up WebAssembly module...\"\n\n    for func_name in exported_functions\n        try\n            # Call with dummy parameters to trigger JIT compilation\n            # This is function-specific and requires knowledge of signatures\n            call(instance, func_name, [0])\n        catch e::WasmtimeError\n            # Expected for functions with different signatures\n            @debug \"Warmup failed for $func_name: $(e.message)\"\n        end\n    end\n\n    @info \"Module warmup completed\"\nend","category":"page"},{"location":"80-performance/#Performance-Best-Practices","page":"Performance Guide","title":"Performance Best Practices","text":"","category":"section"},{"location":"80-performance/#Configuration-Guidelines","page":"Performance Guide","title":"Configuration Guidelines","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Production: Use SpeedAndSize optimization, disable debug info\nDevelopment: Use None optimization, enable debug info\nTesting: Use Speed optimization, selective debug info\nProfiling: Use Speed optimization, enable profiling strategy","category":"page"},{"location":"80-performance/#Resource-Management-Guidelines","page":"Performance Guide","title":"Resource Management Guidelines","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Reuse engines across multiple stores and modules\nCache compiled modules when loading the same WASM multiple times\nBatch operations within single store instances\nUse typed functions for frequently called functions\nMinimize parameter conversion overhead","category":"page"},{"location":"80-performance/#Memory-Guidelines","page":"Performance Guide","title":"Memory Guidelines","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Set appropriate stack sizes based on recursion depth\nUse fuel limiting only when security is required\nPrefer epoch interruption over fuel for long-running tasks\nMonitor memory usage in long-running applications","category":"page"},{"location":"80-performance/#Concurrency-Guidelines","page":"Performance Guide","title":"Concurrency Guidelines","text":"","category":"section"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"Share engines across threads safely\nUse thread-local stores for concurrent execution\nImplement instance pooling for high-throughput scenarios\nAvoid shared state between WebAssembly instances","category":"page"},{"location":"80-performance/","page":"Performance Guide","title":"Performance Guide","text":"By following these performance optimization techniques, you can achieve optimal performance for your WebAssembly applications while maintaining security and reliability.","category":"page"},{"location":"21-generic-vectors/#Generic-Vector-Wrapper-(WasmVec)","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"The WasmVec{T,S} type provides a unified, Julia-idiomatic interface for all Wasmtime vector types (wasm_XXX_vec_t). It implements the AbstractVector interface, allowing seamless integration with Julia's ecosystem while maintaining automatic memory management.","category":"page"},{"location":"21-generic-vectors/#Overview","page":"Generic Vector Wrapper (WasmVec)","title":"Overview","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Wasmtime defines numerous vector types such as:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"wasm_extern_vec_t - for collections of externals\nwasm_importtype_vec_t - for import type collections\nwasm_exporttype_vec_t - for export type collections\nwasm_valtype_vec_t - for value type collections\nwasm_val_vec_t - for value collections\nwasm_byte_vec_t - for byte/string data\nAnd many more...","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Instead of handling each type manually, WasmVec provides a generic wrapper that works with all of them.","category":"page"},{"location":"21-generic-vectors/#Type-Parameters","page":"Generic Vector Wrapper (WasmVec)","title":"Type Parameters","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"T: The underlying C vector type (e.g., wasm_extern_vec_t)\nS: The element type (e.g., Ptr{wasm_extern_t} or UInt8)","category":"page"},{"location":"21-generic-vectors/#Basic-Usage","page":"Generic Vector Wrapper (WasmVec)","title":"Basic Usage","text":"","category":"section"},{"location":"21-generic-vectors/#Creating-Vectors","page":"Generic Vector Wrapper (WasmVec)","title":"Creating Vectors","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# From Julia vectors (automatic type detection)\nbytes = UInt8[0x48, 0x65, 0x6c, 0x6c, 0x6f]  # \"Hello\"\nvec = WasmVec(bytes)\n\n# Explicit type specification\nusing Wasmtime.LibWasmtime: wasm_byte_vec_t\nvec = WasmVec{wasm_byte_vec_t, UInt8}(bytes)\n\n# Using type aliases\nvec = WasmByteVec(bytes)\n\n# Empty vectors\nempty_vec = WasmVec(UInt8)","category":"page"},{"location":"21-generic-vectors/#AbstractVector-Interface","page":"Generic Vector Wrapper (WasmVec)","title":"AbstractVector Interface","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"vec = WasmVec(UInt8[1, 2, 3, 4, 5])\n\n# Length and size\nlength(vec)  # 5\nsize(vec)    # (5,)\nisempty(vec) # false\n\n# Indexing\nvec[1]       # 0x01\nvec[end]     # 0x05\nvec[2:4]     # [0x02, 0x03, 0x04]\n\n# Assignment\nvec[1] = 10  # vec is now [10, 2, 3, 4, 5]\n\n# Iteration\nfor x in vec\n    println(x)\nend\n\n# Bounds checking is automatic\nvec[10]  # BoundsError","category":"page"},{"location":"21-generic-vectors/#Conversion","page":"Generic Vector Wrapper (WasmVec)","title":"Conversion","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Convert back to Julia vector\njulia_vec = to_julia_vector(wasm_vec)\n# or\njulia_vec = collect(wasm_vec)\n\n# Copy a WasmVec\ncopied = copy(wasm_vec)","category":"page"},{"location":"21-generic-vectors/#Type-Aliases","page":"Generic Vector Wrapper (WasmVec)","title":"Type Aliases","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"For convenience, several type aliases are provided:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Byte vectors (for strings and binary data)\nconst WasmByteVec = WasmVec{wasm_byte_vec_t, UInt8}\nconst WasmName = WasmByteVec\n\n# Common vector types\nconst WasmExternVec = WasmVec{wasm_extern_vec_t, Ptr{wasm_extern_t}}\nconst WasmImportTypeVec = WasmVec{wasm_importtype_vec_t, Ptr{wasm_importtype_t}}\nconst WasmExportTypeVec = WasmVec{wasm_exporttype_vec_t, Ptr{wasm_exporttype_t}}\nconst WasmValtypeVec = WasmVec{wasm_valtype_vec_t, Ptr{wasm_valtype_t}}\nconst WasmValVec = WasmVec{wasm_val_vec_t, wasm_val_t}\nconst WasmTableTypeVec = WasmVec{wasm_tabletype_vec_t, Ptr{wasm_tabletype_t}}\nconst WasmExternTypeVec = WasmVec{wasm_externtype_vec_t, Ptr{wasm_externtype_t}}\nconst WasmFrameVec = WasmVec{wasm_frame_vec_t, Ptr{wasm_frame_t}}","category":"page"},{"location":"21-generic-vectors/#Memory-Management","page":"Generic Vector Wrapper (WasmVec)","title":"Memory Management","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"WasmVec handles memory management automatically:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Memory is allocated when creating the vector\nA finalizer is set up to call the appropriate wasm_XXX_vec_delete function\nMemory is automatically freed when the vector goes out of scope\nNo manual cleanup required.","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"function create_vector()\n    vec = WasmVec(UInt8[1, 2, 3, 4, 5])\n    return length(vec)\nend  # vec automatically cleaned up here\n\nlen = create_vector()  # Memory is properly managed","category":"page"},{"location":"21-generic-vectors/#C-Interoperability","page":"Generic Vector Wrapper (WasmVec)","title":"C Interoperability","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"For interfacing with C functions, WasmVec provides unsafe conversion methods:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"vec = WasmVec(UInt8[1, 2, 3])\n\n# Convert to pointer to the C struct\nstruct_ptr = Base.unsafe_convert(Ptr{wasm_byte_vec_t}, vec)\n\n# Convert to pointer to the data\ndata_ptr = Base.unsafe_convert(Ptr{UInt8}, vec)\n\n# Use with C functions\nsome_c_function(struct_ptr)","category":"page"},{"location":"21-generic-vectors/#Working-with-Pointers","page":"Generic Vector Wrapper (WasmVec)","title":"Working with Pointers","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"For vectors that contain pointers (most Wasmtime types), use WasmPtrVec:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Create vector of pointers\nptrs = [ptr1, ptr2, ptr3]  # Ptr{wasm_extern_t}\nextern_vec = WasmPtrVec(ptrs)\n\n# Or use type-specific aliases\nextern_vec = WasmExternVec(ptrs)","category":"page"},{"location":"21-generic-vectors/#Type-Safety","page":"Generic Vector Wrapper (WasmVec)","title":"Type Safety","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"The wrapper provides compile-time type safety:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"vec = WasmVec(UInt8[1, 2, 3])\n\n# This will cause a compile error\nvec[1] = \"wrong type\"  # MethodError\n\n# Element types must match\nvec[1] = UInt8(42)  # ✓ Correct","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Assignment and indexing operations ensure that the types are consistent with the underlying C vector type, preventing runtime errors. Meaning,","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Element types must match\nvec[1] = UInt8(42)  # ✓ Correct\n\nvec[1] = Int32(42)  # ✓ Correct but will convert to UInt8\n\n# This will cause a compile error\nvec[1] = \"wrong type\"  # MethodError","category":"page"},{"location":"21-generic-vectors/#Examples","page":"Generic Vector Wrapper (WasmVec)","title":"Examples","text":"","category":"section"},{"location":"21-generic-vectors/#String-Handling","page":"Generic Vector Wrapper (WasmVec)","title":"String Handling","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Create a string as bytes\nhello = \"Hello, World!\"\nbytes = Vector{UInt8}(hello)\nname_vec = WasmName(bytes)\n\n# Use in Wasmtime functions\n# module_name = wasmtime_module_name(module, name_vec)\n\n# Convert back to string\nresult_string = String(collect(name_vec))","category":"page"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"81-conversions/#Conversion","page":"Conversion","title":"Conversion","text":"","category":"section"},{"location":"81-conversions/#Wat-to-Wasm","page":"Conversion","title":"Wat to Wasm","text":"","category":"section"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"The wat2wasm function converts WebAssembly Text Format (WAT) to WebAssembly binary format (WASM). This is useful for compiling WAT code into a format that can be executed by WebAssembly runtimes.","category":"page"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"using WasmtimeRuntime\n\nwat = \"\"\"\n(module\n  (func (export \"add\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add)\n  )\n\"\"\"\n\nwasm = wat2wasm(wat)","category":"page"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"For convenience, you can also use the @wat_str macro to convert a WAT string into a WASM binary format:","category":"page"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"using WasmtimeRuntime\n\nwasm_binary = @wat_str \"\"\"\n(module\n  (func (export \"add\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add)\n  )\n\"\"\"\n\n# or simply:\n\nwasm_binary = wat\"\"\"\n(module\n  (func (export \"add\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add)\n  )\n\"\"\"","category":"page"},{"location":"#WasmtimeRuntime","page":"WasmtimeRuntime","title":"WasmtimeRuntime","text":"","category":"section"},{"location":"","page":"WasmtimeRuntime","title":"WasmtimeRuntime","text":"Documentation for WasmtimeRuntime.","category":"page"},{"location":"#Contributors","page":"WasmtimeRuntime","title":"Contributors","text":"","category":"section"},{"location":"","page":"WasmtimeRuntime","title":"WasmtimeRuntime","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"},{"location":"71-traps/#WebAssembly-Traps","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"WebAssembly traps are runtime exceptions that occur during WebAssembly execution when the program encounters an unrecoverable error. WasmtimeRuntime.jl provides the WasmTrap type to handle these exceptional conditions.","category":"page"},{"location":"71-traps/#WasmTrap-Overview","page":"WebAssembly Traps","title":"WasmTrap Overview","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"WasmTrap represents a WebAssembly trap - a runtime error that immediately terminates execution of the WebAssembly program. Traps are distinct from regular Julia exceptions in that they originate from the WebAssembly runtime itself.","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"struct WasmTrap <: Exception\n    ptr::Ptr{LibWasmtime.wasm_trap_t}\n    msg::AbstractString\nend","category":"page"},{"location":"71-traps/#Creating-WasmTrap-Instances","page":"WebAssembly Traps","title":"Creating WasmTrap Instances","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Traps are typically created automatically by the WebAssembly runtime, but you can also create them from existing trap pointers:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"# From a C pointer (internal use)\n# trap_ptr  <--- Assume this is a valid pointer to a wasm_trap_t object\ntrap = WasmTrap(trap_ptr)\n\n# The trap message is automatically extracted\nprintln(trap.msg)  # \"integer divide by zero\"","category":"page"},{"location":"71-traps/#Common-Trap-Scenarios","page":"WebAssembly Traps","title":"Common Trap Scenarios","text":"","category":"section"},{"location":"71-traps/#Division-by-Zero","page":"WebAssembly Traps","title":"Division by Zero","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"wasm_code = wat\"\"\"\n(module\n  (func (export \"divide\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.div_s))\n\"\"\"\n\nengine = Engine()\nstore = Store(engine)\nmodule_obj = WasmModule(engine, wat2wasm(wasm_code))\ninstance = Instance(store, module_obj)\n\ntry\n    # This will trap due to division by zero\n    result = call(instance, \"divide\", [10, 0])\ncatch trap::WasmTrap\n    println(\"Caught trap: $(trap.msg)\")\n    # Output: \"Caught trap: integer divide by zero\"\nend","category":"page"},{"location":"71-traps/#Memory-Access-Out-of-Bounds","page":"WebAssembly Traps","title":"Memory Access Out of Bounds","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"wasm_code = wat\"\"\"\n(module\n  (memory (export \"memory\") 1)\n  (func (export \"load\") (param i32) (result i32)\n    local.get 0\n    i32.load))\n\"\"\"\n\nengine = Engine()\nstore = Store(engine)\nmodule_obj = WasmModule(engine, wat2wasm(wasm_code))\ninstance = Instance(store, module_obj)\n\ntry\n    # This will trap due to out-of-bounds memory access\n    result = call(instance, \"load\", [100000])  # Beyond memory bounds\ncatch trap::WasmTrap\n    println(\"Memory access trap: $(trap.msg)\")\n    # Output: \"Memory access trap: out of bounds memory access\"\nend","category":"page"},{"location":"71-traps/#Stack-Overflow","page":"WebAssembly Traps","title":"Stack Overflow","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"wasm_code = wat\"\"\"\n(module\n  (func (export \"recurse\") (param i32) (result i32)\n    local.get 0\n    i32.const 1\n    i32.sub\n    local.tee 0\n    i32.const 0\n    i32.gt_s\n    if (result i32)\n      local.get 0\n      call 0  ; recursive call\n    else\n      local.get 0\n    end))\n\"\"\"\n\nengine = Engine()\nstore = Store(engine)\nmodule_obj = WasmModule(engine, wat2wasm(wasm_code))\ninstance = Instance(store, module_obj)\n\ntry\n    # This will trap due to stack overflow\n    result = call(instance, \"recurse\", [10000])\ncatch trap::WasmTrap\n    println(\"Stack overflow trap: $(trap.msg)\")\n    # Output: \"Stack overflow trap: call stack exhausted\"\nend","category":"page"},{"location":"71-traps/#Integer-Overflow","page":"WebAssembly Traps","title":"Integer Overflow","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"wasm_code = wat\"\"\"\n(module\n  (func (export \"overflow\") (param i32) (result i32)\n    local.get 0\n    i32.const -1\n    i32.div_s))\n\"\"\"\n\nengine = Engine()\nstore = Store(engine)\nmodule_obj = WasmModule(engine, wat2wasm(wasm_code))\ninstance = Instance(store, module_obj)\n\ntry\n    # This will trap due to integer overflow\n    result = call(instance, \"overflow\", [typemin(Int32)])\ncatch trap::WasmTrap\n    println(\"Overflow trap: $(trap.msg)\")\n    # Output: \"Overflow trap: integer overflow\"\nend","category":"page"},{"location":"71-traps/#Trap-Handling-Patterns","page":"WebAssembly Traps","title":"Trap Handling Patterns","text":"","category":"section"},{"location":"71-traps/#Basic-Trap-Handling","page":"WebAssembly Traps","title":"Basic Trap Handling","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"function safe_wasm_call(instance, func_name, params)\n    try\n        return call(instance, func_name, params)\n    catch trap::WasmTrap\n        @warn \"WebAssembly trap occurred\" function=func_name message=trap.msg\n        return nothing\n    end\nend","category":"page"},{"location":"71-traps/#Specific-Trap-Type-Handling","page":"WebAssembly Traps","title":"Specific Trap Type Handling","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"function handle_specific_traps(instance, func_name, params)\n    try\n        return call(instance, func_name, params)\n    catch trap::WasmTrap\n        msg = lowercase(trap.msg)\n\n        if occursin(\"divide by zero\", msg)\n            @warn \"Division by zero detected, returning zero\"\n            return 0\n        elseif occursin(\"out of bounds\", msg)\n            @error \"Memory access violation\" function=func_name params=params\n            rethrow(trap)\n        elseif occursin(\"stack exhausted\", msg)\n            @error \"Stack overflow detected\" function=func_name\n            rethrow(trap)\n        else\n            @error \"Unknown trap type\" message=trap.msg\n            rethrow(trap)\n        end\n    end\nend","category":"page"},{"location":"71-traps/#Trap-Recovery-with-Fallback","page":"WebAssembly Traps","title":"Trap Recovery with Fallback","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"function call_with_fallback(instance, primary_func, fallback_func, params)\n    try\n        return call(instance, primary_func, params)\n    catch trap::WasmTrap\n        @warn \"Primary function trapped, trying fallback\"\n              primary=primary_func fallback=fallback_func message=trap.msg\n\n        try\n            return call(instance, fallback_func, params)\n        catch fallback_trap::WasmTrap\n            @error \"Both primary and fallback functions trapped\"\n                   primary_trap=trap.msg fallback_trap=fallback_trap.msg\n            rethrow(trap)  # Rethrow original trap\n        end\n    end\nend","category":"page"},{"location":"71-traps/#WasmTrap-API-Reference","page":"WebAssembly Traps","title":"WasmTrap API Reference","text":"","category":"section"},{"location":"71-traps/#Fields","page":"WebAssembly Traps","title":"Fields","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"ptr::Ptr{LibWasmtime.wasm_trap_t} - Raw pointer to the underlying C trap object\nmsg::AbstractString - Human-readable trap message","category":"page"},{"location":"71-traps/#Methods","page":"WebAssembly Traps","title":"Methods","text":"","category":"section"},{"location":"71-traps/#Constructors","page":"WebAssembly Traps","title":"Constructors","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"WasmTrap(ptr::Ptr{LibWasmtime.wasm_trap_t})","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Creates a WasmTrap from a C pointer, automatically extracting the trap message.","category":"page"},{"location":"71-traps/#Comparison-Operations","page":"WebAssembly Traps","title":"Comparison Operations","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"trap1 == trap2          # Compare two traps\ntrap == ptr             # Compare trap with C pointer\ntrap != other_trap      # Inequality comparison","category":"page"},{"location":"71-traps/#Utility-Functions","page":"WebAssembly Traps","title":"Utility Functions","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Base.isvalid(trap)      # Check if trap pointer is valid\nBase.show(io, trap)     # Display trap information\nBase.showerror(io, trap) # Display trap as error","category":"page"},{"location":"71-traps/#Conversion-Functions","page":"WebAssembly Traps","title":"Conversion Functions","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Base.unsafe_convert(::Type{WasmTrap}, ptr)\nBase.unsafe_convert(::Type{Ptr{LibWasmtime.wasm_trap_t}}, trap)","category":"page"},{"location":"71-traps/#Best-Practices","page":"WebAssembly Traps","title":"Best Practices","text":"","category":"section"},{"location":"71-traps/#1.-Always-Handle-Traps","page":"WebAssembly Traps","title":"1. Always Handle Traps","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"WebAssembly traps should always be handled, as they represent runtime errors:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"# ✅ Good - Handle traps appropriately\ntry\n    result = call(instance, \"risky_function\", params)\n    return result\ncatch trap::WasmTrap\n    @error \"Function trapped\" message=trap.msg\n    return default_value\nend\n\n# ❌ Bad - Ignore potential traps\nresult = call(instance, \"risky_function\", params)  # May throw unhandled trap","category":"page"},{"location":"71-traps/#2.-Log-Trap-Information","page":"WebAssembly Traps","title":"2. Log Trap Information","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Include trap messages in logs for debugging:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"# ✅ Good - Include trap context\ncatch trap::WasmTrap\n    @error \"WebAssembly trap occurred\"\n           func=func_name\n           params=params\n           message=trap.msg\n           stack_trace=stacktrace()\nend","category":"page"},{"location":"71-traps/#3.-Validate-Inputs","page":"WebAssembly Traps","title":"3. Validate Inputs","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Prevent common traps by validating inputs:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"function safe_divide(instance, a, b)\n    if b == 0\n        @warn \"Division by zero prevented\"\n        return 0\n    end\n\n    return call(instance, \"divide\", [a, b])\nend","category":"page"},{"location":"71-traps/#4.-Use-Appropriate-Error-Recovery","page":"WebAssembly Traps","title":"4. Use Appropriate Error Recovery","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Choose recovery strategies based on trap type:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"function adaptive_trap_handling(instance, func_name, params)\n    try\n        return call(instance, func_name, params)\n    catch trap::WasmTrap\n        msg = lowercase(trap.msg)\n\n        # Recoverable errors\n        if occursin(\"divide by zero\", msg)\n            return 0  # Safe default\n        end\n\n        # Non-recoverable errors\n        if occursin(\"out of bounds\", msg) || occursin(\"stack exhausted\", msg)\n            rethrow(trap)  # Let caller handle\n        end\n\n        # Unknown traps\n        @error \"Unknown trap type, rethrowing\" message=trap.msg\n        rethrow(trap)\n    end\nend","category":"page"},{"location":"71-traps/#Performance-Considerations","page":"WebAssembly Traps","title":"Performance Considerations","text":"","category":"section"},{"location":"71-traps/#Trap-Overhead","page":"WebAssembly Traps","title":"Trap Overhead","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Catching traps has minimal overhead, but creating trap objects involves:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Message extraction from C runtime\nString allocation for the message\nJulia object creation","category":"page"},{"location":"71-traps/#Avoiding-Traps","page":"WebAssembly Traps","title":"Avoiding Traps","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"The best performance strategy is preventing traps:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"# ✅ Prevent traps when possible\nfunction optimized_divide(instance, a, b)\n    if b == 0\n        return 0  # Avoid trap entirely\n    end\n    return call(instance, \"divide\", [a, b])\nend\n\n# ❌ Rely on trap handling\nfunction slow_divide(instance, a, b)\n    try\n        return call(instance, \"divide\", [a, b])\n    catch trap::WasmTrap\n        return 0  # Trap handling is slower\n    end\nend","category":"page"},{"location":"71-traps/#Common-Pitfalls","page":"WebAssembly Traps","title":"Common Pitfalls","text":"","category":"section"},{"location":"71-traps/#1.-Ignoring-Trap-Messages","page":"WebAssembly Traps","title":"1. Ignoring Trap Messages","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"# ❌ Bad - Ignore valuable trap information\ncatch trap::WasmTrap\n    return nothing  # Lost debugging information\nend\n\n# ✅ Good - Log trap details\ncatch trap::WasmTrap\n    @error \"Trap occurred\" message=trap.msg\n    return nothing\nend","category":"page"},{"location":"71-traps/#2.-Incorrect-Trap-Classification","page":"WebAssembly Traps","title":"2. Incorrect Trap Classification","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"# ❌ Bad - Overly broad trap handling\ncatch trap::WasmTrap\n    return default_value  # May mask serious errors\nend\n\n# ✅ Good - Specific trap handling\ncatch trap::WasmTrap\n    if occursin(\"divide by zero\", trap.msg)\n        return 0  # Safe recovery\n    else\n        rethrow(trap)  # Don't mask other errors\n    end\nend","category":"page"},{"location":"71-traps/#Summary","page":"WebAssembly Traps","title":"Summary","text":"","category":"section"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"WasmTrap provides robust handling for WebAssembly runtime errors. Key points:","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Traps represent unrecoverable WebAssembly runtime errors\nAlways handle traps appropriately in production code\nUse trap messages for debugging and error analysis\nImplement appropriate recovery strategies based on trap type\nPrefer preventing traps over handling them when possible\nLog trap information for debugging and monitoring","category":"page"},{"location":"71-traps/","page":"WebAssembly Traps","title":"WebAssembly Traps","text":"Understanding and properly handling WebAssembly traps is essential for building robust applications with WasmtimeRuntime.jl.","category":"page"}]
}
