var documenterSearchIndex = {"docs":
[{"location":"91-developer/#dev_docs","page":"Developer documentation","title":"Developer documentation","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"note: Contributing guidelines\nIf you haven't, please read the Contributing guidelines first.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If you want to make contributions to this package that involves code, then this guide is for you.","category":"page"},{"location":"91-developer/#First-time-clone","page":"Developer documentation","title":"First time clone","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: If you have writing rights\nIf you have writing rights, you don't have to fork. Instead, simply clone and skip ahead. Whenever upstream is mentioned, use origin instead.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If this is the first time you work with this repository, follow the instructions below to clone the repository.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fork this repo\nClone your repo (this will create a git remote called origin)\nAdd this repo as a remote:\ngit remote add upstream https://github.com/damourChris/WasmtimeRuntime.jl","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"This will ensure that you have two remotes in your git: origin and upstream. You will create branches and push to origin, and you will fetch and update your local main branch from upstream.","category":"page"},{"location":"91-developer/#Linting-and-formatting","page":"Developer documentation","title":"Linting and formatting","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Install a plugin on your editor to use EditorConfig. This will ensure that your editor is configured with important formatting settings.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We use https://pre-commit.com to run the linters and formatters. In particular, the Julia code is formatted using JuliaFormatter.jl, so please install it globally first:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # Press ]\npkg> activate\npkg> add JuliaFormatter","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To install pre-commit, we recommend using pipx as follows:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"# Install pipx following the link\npipx install pre-commit","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"With pre-commit installed, activate it as a pre-commit hook:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit install","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To run the linting and formatting manually, enter the command below:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"pre-commit run -a","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Now, you can only commit if all the pre-commit tests pass.","category":"page"},{"location":"91-developer/#Testing","page":"Developer documentation","title":"Testing","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"As with most Julia packages, you can just open Julia in the repository folder, activate the environment, and run test:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"julia> # press ]\npkg> activate .\npkg> test","category":"page"},{"location":"91-developer/#Working-on-a-new-issue","page":"Developer documentation","title":"Working on a new issue","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"We try to keep a linear history in this repo, so it is important to keep your branches up-to-date.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Fetch from the remote and fast-forward your local main\ngit fetch upstream\ngit switch main\ngit merge --ff-only upstream/main\nBranch from main to address the issue (see below for naming)\ngit switch -c 42-add-answer-universe\nPush the new local branch to your personal remote repository\ngit push -u origin 42-add-answer-universe\nCreate a pull request to merge your remote branch into the org main.","category":"page"},{"location":"91-developer/#Branch-naming","page":"Developer documentation","title":"Branch naming","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"If there is an associated issue, add the issue number.\nIf there is no associated issue, and the changes are small, add a prefix such as \"typo\", \"hotfix\", \"small-refactor\", according to the type of update.\nIf the changes are not small and there is no associated issue, then create the issue first, so we can properly discuss the changes.\nUse dash separated imperative wording related to the issue (e.g., 14-add-tests, 15-fix-model, 16-remove-obsolete-files).","category":"page"},{"location":"91-developer/#Commit-message","page":"Developer documentation","title":"Commit message","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Use imperative or present tense, for instance: Add feature or Fix bug.\nHave informative titles.\nWhen necessary, add a body with details.\nIf there are breaking changes, add the information to the commit message.","category":"page"},{"location":"91-developer/#Before-creating-a-pull-request","page":"Developer documentation","title":"Before creating a pull request","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"tip: Atomic git commits\nTry to create \"atomic git commits\" (recommended reading: The Utopic Git History).","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Make sure the tests pass.\nMake sure the pre-commit tests pass.\nFetch any main updates from upstream and rebase your branch, if necessary:\ngit fetch upstream\ngit rebase upstream/main BRANCH_NAME\nThen you can open a pull request and work with the reviewer to address any issues.","category":"page"},{"location":"91-developer/#Building-and-viewing-the-documentation-locally","page":"Developer documentation","title":"Building and viewing the documentation locally","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Following the latest suggestions, we recommend using LiveServer to build the documentation. Here is how you do it:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Run julia --project=docs to open Julia in the environment of the docs.\nIf this is the first time building the docs\nPress ] to enter pkg mode\nRun pkg> dev . to use the development version of your package\nPress backspace to leave pkg mode\nRun julia> using LiveServer\nRun julia> servedocs()","category":"page"},{"location":"91-developer/#Making-a-new-release","page":"Developer documentation","title":"Making a new release","text":"","category":"section"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"To create a new release, you can follow these simple steps:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Create a branch release-x.y.z\nUpdate version in Project.toml\nUpdate the CHANGELOG.md:\nRename the section \"Unreleased\" to \"[x.y.z] - yyyy-mm-dd\" (i.e., version under brackets, dash, and date in ISO format)\nAdd a new section on top of it named \"Unreleased\"\nAdd a new link in the bottom for version \"x.y.z\"\nChange the \"[unreleased]\" link to use the latest version - end of line, vx.y.z ... HEAD.\nCreate a commit \"Release vx.y.z\", push, create a PR, wait for it to pass, merge the PR.\nGo back to main screen and click on the latest commit (link: https://github.com/damourChris/WasmtimeRuntime.jl/commit/main)\nAt the bottom, write @JuliaRegistrator register","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"After that, you only need to wait and verify:","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"Wait for the bot to comment (should take < 1m) with a link to a PR to the registry\nFollow the link and wait for a comment on the auto-merge\nThe comment should said all is well and auto-merge should occur shortly\nAfter the merge happens, TagBot will trigger and create a new GitHub tag. Check on https://github.com/damourChris/WasmtimeRuntime.jl/releases\nAfter the release is create, a \"docs\" GitHub action will start for the tag.\nAfter it passes, a deploy action will run.","category":"page"},{"location":"91-developer/","page":"Developer documentation","title":"Developer documentation","text":"<!– - After that runs, the stable docs should be updated. Check them and look for the version number. –>","category":"page"},{"location":"52-tables/#WebAssembly-Tables","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"WebAssembly tables are resizable arrays that hold references to functions or other WebAssembly objects. In WasmtimeRuntime.jl, tables are represented by the WasmTable type, which provides a Julia-friendly interface for working with WebAssembly table objects.","category":"page"},{"location":"52-tables/#Table-Types","page":"WebAssembly Tables","title":"Table Types","text":"","category":"section"},{"location":"52-tables/#WasmTableType","page":"WebAssembly Tables","title":"WasmTableType","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"The WasmTableType represents the type information for a WebAssembly table, including its size limits and element type.","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Create a table type with default limits (0 => 0)\ntable_type = WasmTableType()\n\n# Create a table type with custom limits\ntable_type = WasmTableType(10 => 100)  # min=10, max=100\n\n# Create from WasmLimits\nlimits = WasmLimits(5, 50)\ntable_type = WasmTableType(limits)","category":"page"},{"location":"52-tables/#Size-Limits","page":"WebAssembly Tables","title":"Size Limits","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Table limits specify the minimum and maximum number of elements:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Minimum: Initial number of elements (must be ≥ 0)\nMaximum: Maximum number of elements (0 means unlimited)","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Table with 5 initial elements, max 20\ntable_type = WasmTableType(5 => 20)\n\n# Table with 10 initial elements, unlimited growth\ntable_type = WasmTableType(10 => 0)\n\n# Empty table that can grow up to 100 elements\ntable_type = WasmTableType(0 => 100)","category":"page"},{"location":"52-tables/#Creating-Tables","page":"WebAssembly Tables","title":"Creating Tables","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Tables are created using a WasmStore and WasmTableType:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Set up WebAssembly environment\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create table type and table\ntable_type = WasmTableType(5 => 50)\ntable = WasmTable(store, table_type)","category":"page"},{"location":"52-tables/#Table-Interface","page":"WebAssembly Tables","title":"Table Interface","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"WasmTable implements the AbstractVector interface, providing familiar array-like operations:","category":"page"},{"location":"52-tables/#Size-and-Indexing","page":"WebAssembly Tables","title":"Size and Indexing","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Get table size\ntable_size = length(table)\nsize_tuple = size(table)  # Returns (length,)\n\n# Access elements (1-based indexing)\nfirst_element = table[1]\nlast_element = table[end]\n\n# Check bounds\nif length(table) > 0\n    element = table[1]  # Safe access\nend","category":"page"},{"location":"52-tables/#Element-Access","page":"WebAssembly Tables","title":"Element Access","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Table elements are function references or other WebAssembly references:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Access table element\nelement = table[1]\n\nif element === nothing\n    println(\"Slot is empty\")\nelse\n    println(\"Slot contains a reference\")\n    # element is a Ptr{LibWasmtime.wasm_ref_t}\nend","category":"page"},{"location":"52-tables/#Type-Information","page":"WebAssembly Tables","title":"Type Information","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Extract type information from existing tables:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Get table type from table\nextracted_type = WasmTableType(table)","category":"page"},{"location":"52-tables/#Error-Handling","page":"WebAssembly Tables","title":"Error Handling","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Common error scenarios and how to handle them:","category":"page"},{"location":"52-tables/#Invalid-Store","page":"WebAssembly Tables","title":"Invalid Store","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\nstore.ptr = C_NULL  # Invalidate store\n\ntable_type = WasmTableType()\n\n# This will throw ArgumentError\ntry\n    table = WasmTable(store, table_type)\ncatch e\n    println(\"Failed to create table: \", e)\nend","category":"page"},{"location":"52-tables/#Bounds-Checking","page":"WebAssembly Tables","title":"Bounds Checking","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"table_type = WasmTableType(3 => 10)\ntable = WasmTable(store, table_type)\n\n# These will throw BoundsError\ntry\n    table[0]     # Invalid: 0-based indexing\n    table[-1]    # Invalid: negative index\n    table[100]   # Invalid: beyond table size\ncatch BoundsError\n    println(\"Index out of bounds\")\nend","category":"page"},{"location":"52-tables/#Invalid-Limits","page":"WebAssembly Tables","title":"Invalid Limits","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"\ntry\n    invalid_limits = WasmLimits(10, 5)  # max < min <---  This will throw ArgumentError\n    table_type = WasmTableType(invalid_limits)\ncatch ArgumentError\n    println(\"Invalid table limits\")\nend","category":"page"},{"location":"52-tables/#Advanced-Usage","page":"WebAssembly Tables","title":"Advanced Usage","text":"","category":"section"},{"location":"52-tables/#Working-with-Multiple-Tables","page":"WebAssembly Tables","title":"Working with Multiple Tables","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create multiple tables with different sizes\nsmall_table = WasmTable(store, WasmTableType(2 => 10))\nlarge_table = WasmTable(store, WasmTableType(50 => 1000))\n\nprintln(\"Small table size: \", length(small_table))\nprintln(\"Large table size: \", length(large_table))","category":"page"},{"location":"52-tables/#Resource-Management","page":"WebAssembly Tables","title":"Resource Management","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Tables are automatically cleaned up when they go out of scope:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"function create_temporary_table()\n    engine = WasmEngine()\n    store = WasmStore(engine)\n    table_type = WasmTableType(5 => 20)\n    table = WasmTable(store, table_type)\n\n    # Use table...\n    return length(table)\nend\n\nsize = create_temporary_table()\n# Table is automatically cleaned up when function exits","category":"page"},{"location":"52-tables/#Performance-Considerations","page":"WebAssembly Tables","title":"Performance Considerations","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"For optimal performance:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Reuse stores: Create one store and use it for multiple tables\nAppropriate sizing: Set realistic minimum and maximum limits\nAvoid frequent type extraction: Cache WasmTableType objects when needed","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"engine = WasmEngine()\nstore = WasmStore(engine)  # Reuse this store\n\n# Create multiple tables efficiently\ntables = [WasmTable(store, WasmTableType(i => i*10)) for i in 1:5]","category":"page"},{"location":"52-tables/#Integration-with-WebAssembly-Modules","page":"WebAssembly Tables","title":"Integration with WebAssembly Modules","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Tables are typically used with WebAssembly modules that export or import table objects:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"# Example: working with a module that uses tables\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create table for module\ntable_type = WasmTableType(10 => 100)\ntable = WasmTable(store, table_type)\n\n# Table can be passed to module instantiation\n# (specific module loading code would depend on your WebAssembly module)","category":"page"},{"location":"52-tables/#Type-System-Integration","page":"WebAssembly Tables","title":"Type System Integration","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"WasmTable integrates well with Julia's type system:","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"table = WasmTable(store, WasmTableType(5 => 20))\n\n# Type checking\n@assert table isa AbstractVector\n@assert eltype(table) == Union{Nothing, Ptr{LibWasmtime.wasm_ref_t}}\n\n# Standard vector operations\n@assert ndims(table) == 1\n@assert firstindex(table) == 1","category":"page"},{"location":"52-tables/#Best-Practices","page":"WebAssembly Tables","title":"Best Practices","text":"","category":"section"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"Validate inputs: Always check that stores and table types are valid\nHandle bounds: Use proper bounds checking when accessing elements\nResource cleanup: Let Julia's garbage collector handle cleanup automatically\nError handling: Wrap table operations in try-catch blocks for robustness","category":"page"},{"location":"52-tables/","page":"WebAssembly Tables","title":"WebAssembly Tables","text":"function safe_table_access(table, index)\n    try\n        if index in 1:length(table)\n            return table[index]\n        else\n            @warn \"Index $index out of bounds for table of size $(length(table))\"\n            return nothing\n        end\n    catch e\n        @error \"Error accessing table: $e\"\n        return nothing\n    end\nend","category":"page"},{"location":"95-reference/#reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"95-reference/#Contents","page":"Reference","title":"Contents","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"95-reference/","page":"Reference","title":"Reference","text":"Pages = [\"95-reference.md\"]","category":"page"},{"location":"95-reference/#WasmtimeRuntime.WasmGlobal","page":"Reference","title":"WasmtimeRuntime.WasmGlobal","text":"WasmGlobal(store::WasmStore, global_type::WasmGlobalType, initial_value::WasmValue) -> WasmGlobal\n\nWebAssembly global variable that can hold a single value of a specific type.\n\nGlobal variables can be either mutable or immutable as defined by their type. They maintain their value throughout the lifetime of a WebAssembly instance.\n\nArguments\n\nstore::WasmStore: The store that owns this global\nglobal_type::WasmGlobalType: Type descriptor defining value type and mutability\ninitial_value::WasmValue: Initial value for the global variable\n\nExamples\n\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a mutable Int32 global\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)  # mutable\nglobal_var = WasmGlobal(store, global_type, WasmValue(Int32(42)))\n\n# Create an immutable Float64 global\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)  # immutable\nglobal_var = WasmGlobal(store, global_type, WasmValue(3.14159))\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmGlobalType","page":"Reference","title":"WasmtimeRuntime.WasmGlobalType","text":"WasmGlobalType(valtype::WasmValtype, mutability::Bool) -> WasmGlobalType\n\nWebAssembly global type descriptor that defines the type and mutability of a global variable.\n\nArguments\n\nvaltype::WasmValtype: The value type (Int32, Int64, Float32, Float64)\nmutability::Bool: true for mutable globals, false for immutable globals\n\nExamples\n\n# Create a mutable Int32 global type\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)\n\n# Create an immutable Float64 global type\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmTable","page":"Reference","title":"WasmtimeRuntime.WasmTable","text":"WasmTable\n\nWebAssembly table that holds function references or other reference types. Implements AbstractVector interface for element access.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmTableType","page":"Reference","title":"WasmtimeRuntime.WasmTableType","text":"WasmTableType\n\nRepresents a WebAssembly table type with size limits and element type. Tables hold function references or other reference types.\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#WasmtimeRuntime.WasmTableType-Tuple{WasmTable}","page":"Reference","title":"WasmtimeRuntime.WasmTableType","text":"WasmTableType(table::WasmTable)\n\nExtract the table type from an existing table.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#WasmtimeRuntime.WasmVec","page":"Reference","title":"WasmtimeRuntime.WasmVec","text":"WasmVec{T,S} <: AbstractVector{S}\n\nGeneric wrapper around wasm_XXX_vec_t types that implements AbstractVector interface.\n\nExamples\n\nextern_vec = WasmVec{wasm_extern_vec_t, Ptr{wasm_extern_t}}()\nwasm_vec = WasmVec([ptr1, ptr2, ptr3])\n\n\n\n\n\n","category":"type"},{"location":"95-reference/#Base.getindex-Tuple{WasmTable, Int64}","page":"Reference","title":"Base.getindex","text":"getindex(table::WasmTable, index::Int)\n\nGet a reference from the table at the given index (1-based indexing). Returns nothing if the slot is empty, or a reference pointer if occupied.\n\n\n\n\n\n","category":"method"},{"location":"95-reference/#WasmtimeRuntime.wat2wasm-Tuple{AbstractString}","page":"Reference","title":"WasmtimeRuntime.wat2wasm","text":"wat2wasm(wat::AbstractString) -> WasmByteVec\n\nConverts a WebAssembly Text format (WAT) string to its corresponding WebAssembly binary format (WASM). Takes a WAT string as input and returns a WasmByteVec containing the compiled WASM bytes.\n\n\n\n\n\n","category":"method"},{"location":"40-instances/#WebAssembly-Instances","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"WebAssembly instances represent the runtime instantiation of modules with their own isolated state.","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Each Instance in Wasmtime only represents Module Instances. As such from the WASM specification perspective:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"A module instance is the runtime representation of a module. It is created by instantiating a module, and collects runtime representations of all entities that are imported, defined, or exported by the module.","category":"page"},{"location":"40-instances/#Instance-Basics","page":"WebAssembly Instances","title":"Instance Basics","text":"","category":"section"},{"location":"40-instances/#Creating-Instances","page":"WebAssembly Instances","title":"Creating Instances","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"# Basic instance creation\nengine = WasmEngine()\nstore = WasmStore(engine)\nwasm_bytes = read(\"module.wasm\")\nmodule_obj = WasModule(engine, wasm_bytes)\n\n# Create instance\ninstance = WasmInstance(store, module_obj)","category":"page"},{"location":"40-instances/#Instance-State-Management","page":"WebAssembly Instances","title":"Instance State Management","text":"","category":"section"},{"location":"40-instances/#Isolated-State","page":"WebAssembly Instances","title":"Isolated State","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Each instance maintains its own state:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"# Create multiple instances from the same module\ninstance1 = Instance(store1, module_obj)\ninstance2 = Instance(store2, module_obj)\n\n# Each instance has separate:\n# - Memory contents\n# - Global variable values\n# - Function state","category":"page"},{"location":"40-instances/#Store-Association","page":"WebAssembly Instances","title":"Store Association","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Instances are bound to specific stores:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"engine = Engine()\nstore1 = Store(engine)\nstore2 = Store(engine)\n\nmodule_obj = WasmModule(engine, wasm_bytes)\n\n# Each instance tied to its store\ninstance1 = Instance(store1, module_obj)\ninstance2 = Instance(store2, module_obj)\n\n# Instances cannot be used with different stores","category":"page"},{"location":"40-instances/#Memory-Sharing","page":"WebAssembly Instances","title":"Memory Sharing","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"Within the same store, instances can share certain resources:","category":"page"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"# Multiple instances in the same store\nstore = Store(engine)\ninstance1 = Instance(store, module_obj)\ninstance2 = Instance(store, module_obj)\n\n# They share the store context but maintain separate module state","category":"page"},{"location":"40-instances/#Error-Handling","page":"WebAssembly Instances","title":"Error Handling","text":"","category":"section"},{"location":"40-instances/#Instance-Creation-Errors","page":"WebAssembly Instances","title":"Instance Creation Errors","text":"","category":"section"},{"location":"40-instances/","page":"WebAssembly Instances","title":"WebAssembly Instances","text":"try\n    # Invalid store\n    store.ptr = C_NULL\n    instance = Instance(store, module_obj)\ncatch e::WasmtimeError\n    println(\"Invalid store: $(e.message)\")\nend\n\ntry\n    # Invalid module\n    module_obj.ptr = C_NULL\n    instance = Instance(store, module_obj)\ncatch e::WasmtimeError\n    println(\"Invalid module: $(e.message)\")\nend","category":"page"},{"location":"50-functions/#Function-Calling-and-Type-Conversion","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"","category":"section"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"WasmtimeRuntime.jl provides a WasmFunc struct to create and interface with WebAssembly functions.","category":"page"},{"location":"50-functions/#Defining-WebAssembly-Functions","page":"Function Calling and Type Conversion","title":"Defining WebAssembly Functions","text":"","category":"section"},{"location":"50-functions/#Example:-Function-taking-(i32,-i32)-i32","page":"Function Calling and Type Conversion","title":"Example: Function taking (i32, i32) → i32","text":"","category":"section"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"function add(x::Int32, y::Int32)::Int32\n    return x + y\nend\n\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a WebAssembly function from a Julia function\nwasm_func = WasmFunc(store, add)","category":"page"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"note: Note\nThe WasmFunc constructor automatically infers the function signature from the Julia function's type annotations. For now, it only supports functions with a single signature, i.e., no overloading.","category":"page"},{"location":"50-functions/#Function-Calling","page":"Function Calling and Type Conversion","title":"Function Calling","text":"","category":"section"},{"location":"50-functions/#Direct-Function-Calls","page":"Function Calling and Type Conversion","title":"Direct Function Calls","text":"","category":"section"},{"location":"50-functions/","page":"Function Calling and Type Conversion","title":"Function Calling and Type Conversion","text":"# Specify parameter types explicitly\nresult = WasmFunc(store, add)(42, 24)  # Returns Int32\n\n# Will throw an error if the types do not match\nresult = WasmFunc(store, add)(42.0, 24)  # Throws error","category":"page"},{"location":"51-memory/#WebAssembly-Memory","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"WebAssembly linear memory is a contiguous, mutable array of raw bytes that serves as the heap for WebAssembly modules. This chapter covers working with memory in WasmtimeRuntime.jl.","category":"page"},{"location":"51-memory/#Overview","page":"WebAssembly Memory","title":"Overview","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"WebAssembly memory is organized into 64KB pages and can be dynamically resized during execution. The WasmtimeRuntime.jl library provides two main types for working with memory:","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"WasmMemoryType: Defines memory characteristics and constraints\nWasmMemory: An actual memory instance within a store","category":"page"},{"location":"51-memory/#Memory-Types","page":"WebAssembly Memory","title":"Memory Types","text":"","category":"section"},{"location":"51-memory/#WasmMemoryType","page":"WebAssembly Memory","title":"WasmMemoryType","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"A WasmMemoryType specifies the properties of a WebAssembly memory:","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"# Create memory type with 1 initial page, up to 10 pages maximum\nmemory_type = WasmMemoryType(1 => 10)\n\n# Create memory type with 5 initial pages, unlimited growth\nmemory_type = WasmMemoryType(5 => 0)\n\n# Default: no initial pages, unlimited growth\nmemory_type = WasmMemoryType()","category":"page"},{"location":"51-memory/#Memory-Limits","page":"WebAssembly Memory","title":"Memory Limits","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"Memory limits are specified as page counts where each page is exactly 64KB (65,536 bytes):","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"Minimum pages: Initial memory size\nMaximum pages: Growth limit (0 means unlimited)","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"# 64KB initial, up to 1MB maximum\nmemory_type = WasmMemoryType(1 => 16)\n\n# 320KB initial, unlimited growth\nmemory_type = WasmMemoryType(5 => 0)","category":"page"},{"location":"51-memory/#Memory-Instances","page":"WebAssembly Memory","title":"Memory Instances","text":"","category":"section"},{"location":"51-memory/#Creating-Memory","page":"WebAssembly Memory","title":"Creating Memory","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"Memory instances are created within a store:","category":"page"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create memory with specific limits\nmemory = WasmMemory(store, 2 => 100)\n\n# Create default memory\nmemory = WasmMemory(store)","category":"page"},{"location":"51-memory/#Memory-Properties","page":"WebAssembly Memory","title":"Memory Properties","text":"","category":"section"},{"location":"51-memory/","page":"WebAssembly Memory","title":"WebAssembly Memory","text":"# Check if memory is valid\nisvalid(memory)  # returns Bool\n\n# Get string representation\nstring(memory)  # \"WasmMemory()\"","category":"page"},{"location":"53-global/#WebAssembly-Global-Variables","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables in WebAssembly are storage locations that persist for the lifetime of a WebAssembly instance. They can hold a single value of a specific type (Int32, Int64, Float32, or Float64) and can be either mutable or immutable.","category":"page"},{"location":"53-global/#Global-Types","page":"WebAssembly Global Variables","title":"Global Types","text":"","category":"section"},{"location":"53-global/#WasmGlobalType","page":"WebAssembly Global Variables","title":"WasmGlobalType","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Defines the characteristics of a global variable including its value type and mutability.","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Create a mutable Int32 global type\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)  # true = mutable\n\n# Create an immutable Float64 global type\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)  # false = immutable","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Constructor Parameters:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"valtype::WasmValtype: The WebAssembly value type\nmutability::Bool: Whether the global can be modified after creation","category":"page"},{"location":"53-global/#Global-Variables","page":"WebAssembly Global Variables","title":"Global Variables","text":"","category":"section"},{"location":"53-global/#WasmGlobal","page":"WebAssembly Global Variables","title":"WasmGlobal","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Represents an actual global variable instance with a value.","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a mutable counter global\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)\ncounter = WasmGlobal(store, global_type, WasmValue(Int32(0)))\n\n# Create an immutable constant\nvaltype = WasmValType(Float64)\nglobal_type = WasmGlobalType(valtype, false)\npi_constant = WasmGlobal(store, global_type, WasmValue(3.14159))","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Constructor Parameters:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"store::WasmStore: The store that owns this global\nglobal_type::WasmGlobalType: Type descriptor defining characteristics\ninitial_value::WasmValue: Starting value for the global","category":"page"},{"location":"53-global/#Supported-Types","page":"WebAssembly Global Variables","title":"Supported Types","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"WebAssembly globals support four primitive types:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Julia Type WebAssembly Type Description\nInt32 i32 32-bit signed integer\nInt64 i64 64-bit signed integer\nFloat32 f32 32-bit floating point\nFloat64 f64 64-bit floating point","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Examples for each type\nint32_global = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), true), WasmValue(Int32(42)))\nint64_global = WasmGlobal(store, WasmGlobalType(WasmValType(Int64), true), WasmValue(Int64(1000)))\nfloat32_global = WasmGlobal(store, WasmGlobalType(WasmValType(Float32), true), WasmValue(Float32(2.718)))\nfloat64_global = WasmGlobal(store, WasmGlobalType(WasmValType(Float64), true), WasmValue(3.14159))","category":"page"},{"location":"53-global/#Mutability","page":"WebAssembly Global Variables","title":"Mutability","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables can be either mutable or immutable:","category":"page"},{"location":"53-global/#Mutable-Globals","page":"WebAssembly Global Variables","title":"Mutable Globals","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Can be modified after creation\nvaltype = WasmValType(Int32)\nmutable_type = WasmGlobalType(valtype, true)  # true = mutable\ncounter = WasmGlobal(store, mutable_type, WasmValue(Int32(0)))","category":"page"},{"location":"53-global/#Immutable-Globals","page":"WebAssembly Global Variables","title":"Immutable Globals","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Cannot be modified after creation\nvaltype = WasmValType(Float64)\nimmutable_type = WasmGlobalType(valtype, false)  # false = immutable\nconstant = WasmGlobal(store, immutable_type, WasmValue(3.14159))","category":"page"},{"location":"53-global/#Common-Usage-Patterns","page":"WebAssembly Global Variables","title":"Common Usage Patterns","text":"","category":"section"},{"location":"53-global/#Application-Configuration","page":"WebAssembly Global Variables","title":"Application Configuration","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Store application constants as immutable globals\ndebug_mode = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), false),\n    WasmValue(Int32(1)))  # 1 = debug on\n\nmax_iterations = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), false),\n    WasmValue(Int32(1000)))","category":"page"},{"location":"53-global/#Runtime-State","page":"WebAssembly Global Variables","title":"Runtime State","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Track mutable runtime state\nframe_counter = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int64), true),\n    WasmValue(Int64(0)))\n\nlast_error_code = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), true),\n    WasmValue(Int32(0)))","category":"page"},{"location":"53-global/#Mathematical-Constants","page":"WebAssembly Global Variables","title":"Mathematical Constants","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Store frequently used mathematical constants\npi = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Float64), false),\n    WasmValue(3.141592653589793))\n\ne = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Float64), false),\n    WasmValue(2.718281828459045))","category":"page"},{"location":"53-global/#Resource-Management","page":"WebAssembly Global Variables","title":"Resource Management","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables automatically manage their memory through Julia's finalizer system:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Resources are automatically cleaned up\nfunction create_globals()\n    engine = WasmEngine()\n    store = WasmStore(engine)\n\n    valtype = WasmValType(Int32)\n    global_type = WasmGlobalType(valtype, true)\n    global_var = WasmGlobal(store, global_type, WasmValue(Int32(42)))\n\n    return global_var\nend\n\nglobal_var = create_globals()\n# When global_var goes out of scope, memory is automatically freed","category":"page"},{"location":"53-global/#Error-Handling","page":"WebAssembly Global Variables","title":"Error Handling","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Common errors when working with globals:","category":"page"},{"location":"53-global/#Invalid-Value-Type","page":"WebAssembly Global Variables","title":"Invalid Value Type","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Error: Using an invalid WasmValtype\nvaltype = WasmValType(Int32)\nvaltype.ptr = C_NULL  # Simulate corruption\n# This will throw ArgumentError(\"Invalid WasmValtype\")\nglobal_type = WasmGlobalType(valtype, true)","category":"page"},{"location":"53-global/#Invalid-Store-or-Type","page":"WebAssembly Global Variables","title":"Invalid Store or Type","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"engine = WasmEngine()\nstore = WasmStore(engine)\nstore.ptr = C_NULL  # Simulate corruption\n\nvaltype = WasmValType(Int32)\nglobal_type = WasmGlobalType(valtype, true)\n# This will throw ArgumentError(\"Invalid store or global type\")\nglobal_var = WasmGlobal(store, global_type, WasmValue(Int32(42)))","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"<!– ### Invalid Initial Value","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"initial_value = WasmValue(Int32(42))\ninitial_value.ptr = C_NULL  # Simulate corruption\n# This will throw ArgumentError(\"Invalid initial value for global\")\nglobal_var = WasmGlobal(store, global_type, initial_value)","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"–>","category":"page"},{"location":"53-global/#Best-Practices","page":"WebAssembly Global Variables","title":"Best Practices","text":"","category":"section"},{"location":"53-global/#1.-Use-Descriptive-Names","page":"WebAssembly Global Variables","title":"1. Use Descriptive Names","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Good: Clear purpose\nmax_retry_count = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), false), WasmValue(Int32(3)))\n\n# Avoid: Unclear purpose\nx = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), false), WasmValue(Int32(3)))","category":"page"},{"location":"53-global/#2.-Choose-Appropriate-Mutability","page":"WebAssembly Global Variables","title":"2. Choose Appropriate Mutability","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Immutable for constants\nPI = WasmGlobal(store, WasmGlobalType(WasmValType(Float64), false), WasmValue(3.14159))\n\n# Mutable for runtime state\nrequest_count = WasmGlobal(store, WasmGlobalType(WasmValType(Int64), true), WasmValue(Int64(0)))","category":"page"},{"location":"53-global/#3.-Initialize-with-Sensible-Defaults","page":"WebAssembly Global Variables","title":"3. Initialize with Sensible Defaults","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Initialize counters to zero\ncounter = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), true), WasmValue(Int32(0)))\n\n# Initialize flags to false (0)\nerror_flag = WasmGlobal(store, WasmGlobalType(WasmValType(Int32), true), WasmValue(Int32(0)))","category":"page"},{"location":"53-global/#4.-Group-Related-Globals","page":"WebAssembly Global Variables","title":"4. Group Related Globals","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Create related globals together for better organization\nfunction create_math_constants(store)\n    float_type = WasmGlobalType(WasmValType(Float64), false)\n\n    return (\n        pi = WasmGlobal(store, float_type, WasmValue(π)),\n        e = WasmGlobal(store, float_type, WasmValue(ℯ)),\n        golden_ratio = WasmGlobal(store, float_type, WasmValue(1.618033988749))\n    )\nend","category":"page"},{"location":"53-global/#Integration-with-WebAssembly-Modules","page":"WebAssembly Global Variables","title":"Integration with WebAssembly Modules","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Global variables can be imported from or exported to WebAssembly modules:","category":"page"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"# Globals created in Julia can be passed to WebAssembly instances\nengine = WasmEngine()\nstore = WasmStore(engine)\n\n# Create a global that WebAssembly can access\nshared_counter = WasmGlobal(store,\n    WasmGlobalType(WasmValType(Int32), true),\n    WasmValue(Int32(0)))\n\n# This global can then be used when instantiating WebAssembly modules\n# (specific integration depends on module imports/exports)","category":"page"},{"location":"53-global/#Performance-Considerations","page":"WebAssembly Global Variables","title":"Performance Considerations","text":"","category":"section"},{"location":"53-global/","page":"WebAssembly Global Variables","title":"WebAssembly Global Variables","text":"Type Selection: Choose the smallest appropriate type (Int32 vs Int64, Float32 vs Float64)\nMutability: Immutable globals may allow for better optimization\nInitialization: Initialize globals with their expected initial values to avoid unnecessary updates","category":"page"},{"location":"21-generic-vectors/#Generic-Vector-Wrapper-(WasmVec)","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"The WasmVec{T,S} type provides a unified, Julia-idiomatic interface for all Wasmtime vector types (wasm_XXX_vec_t). It implements the AbstractVector interface, allowing seamless integration with Julia's ecosystem while maintaining automatic memory management.","category":"page"},{"location":"21-generic-vectors/#Overview","page":"Generic Vector Wrapper (WasmVec)","title":"Overview","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Wasmtime defines numerous vector types such as:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"wasm_extern_vec_t - for collections of externals\nwasm_importtype_vec_t - for import type collections\nwasm_exporttype_vec_t - for export type collections\nwasm_valtype_vec_t - for value type collections\nwasm_val_vec_t - for value collections\nwasm_byte_vec_t - for byte/string data\nAnd many more...","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Instead of handling each type manually, WasmVec provides a generic wrapper that works with all of them.","category":"page"},{"location":"21-generic-vectors/#Type-Parameters","page":"Generic Vector Wrapper (WasmVec)","title":"Type Parameters","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"T: The underlying C vector type (e.g., wasm_extern_vec_t)\nS: The element type (e.g., Ptr{wasm_extern_t} or UInt8)","category":"page"},{"location":"21-generic-vectors/#Basic-Usage","page":"Generic Vector Wrapper (WasmVec)","title":"Basic Usage","text":"","category":"section"},{"location":"21-generic-vectors/#Creating-Vectors","page":"Generic Vector Wrapper (WasmVec)","title":"Creating Vectors","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# From Julia vectors (automatic type detection)\nbytes = UInt8[0x48, 0x65, 0x6c, 0x6c, 0x6f]  # \"Hello\"\nvec = WasmVec(bytes)\n\n# Explicit type specification\nusing Wasmtime.LibWasmtime: wasm_byte_vec_t\nvec = WasmVec{wasm_byte_vec_t, UInt8}(bytes)\n\n# Using type aliases\nvec = WasmByteVec(bytes)\n\n# Empty vectors\nempty_vec = WasmVec(UInt8)","category":"page"},{"location":"21-generic-vectors/#AbstractVector-Interface","page":"Generic Vector Wrapper (WasmVec)","title":"AbstractVector Interface","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"vec = WasmVec(UInt8[1, 2, 3, 4, 5])\n\n# Length and size\nlength(vec)  # 5\nsize(vec)    # (5,)\nisempty(vec) # false\n\n# Indexing\nvec[1]       # 0x01\nvec[end]     # 0x05\nvec[2:4]     # [0x02, 0x03, 0x04]\n\n# Assignment\nvec[1] = 10  # vec is now [10, 2, 3, 4, 5]\n\n# Iteration\nfor x in vec\n    println(x)\nend\n\n# Bounds checking is automatic\nvec[10]  # BoundsError","category":"page"},{"location":"21-generic-vectors/#Conversion","page":"Generic Vector Wrapper (WasmVec)","title":"Conversion","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Convert back to Julia vector\njulia_vec = to_julia_vector(wasm_vec)\n# or\njulia_vec = collect(wasm_vec)\n\n# Copy a WasmVec\ncopied = copy(wasm_vec)","category":"page"},{"location":"21-generic-vectors/#Type-Aliases","page":"Generic Vector Wrapper (WasmVec)","title":"Type Aliases","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"For convenience, several type aliases are provided:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Byte vectors (for strings and binary data)\nconst WasmByteVec = WasmVec{wasm_byte_vec_t, UInt8}\nconst WasmName = WasmByteVec\n\n# Common vector types\nconst WasmExternVec = WasmVec{wasm_extern_vec_t, Ptr{wasm_extern_t}}\nconst WasmImportTypeVec = WasmVec{wasm_importtype_vec_t, Ptr{wasm_importtype_t}}\nconst WasmExportTypeVec = WasmVec{wasm_exporttype_vec_t, Ptr{wasm_exporttype_t}}\nconst WasmValtypeVec = WasmVec{wasm_valtype_vec_t, Ptr{wasm_valtype_t}}\nconst WasmValVec = WasmVec{wasm_val_vec_t, wasm_val_t}\nconst WasmTableTypeVec = WasmVec{wasm_tabletype_vec_t, Ptr{wasm_tabletype_t}}\nconst WasmExternTypeVec = WasmVec{wasm_externtype_vec_t, Ptr{wasm_externtype_t}}\nconst WasmFrameVec = WasmVec{wasm_frame_vec_t, Ptr{wasm_frame_t}}","category":"page"},{"location":"21-generic-vectors/#Memory-Management","page":"Generic Vector Wrapper (WasmVec)","title":"Memory Management","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"WasmVec handles memory management automatically:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Memory is allocated when creating the vector\nA finalizer is set up to call the appropriate wasm_XXX_vec_delete function\nMemory is automatically freed when the vector goes out of scope\nNo manual cleanup required.","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"function create_vector()\n    vec = WasmVec(UInt8[1, 2, 3, 4, 5])\n    return length(vec)\nend  # vec automatically cleaned up here\n\nlen = create_vector()  # Memory is properly managed","category":"page"},{"location":"21-generic-vectors/#C-Interoperability","page":"Generic Vector Wrapper (WasmVec)","title":"C Interoperability","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"For interfacing with C functions, WasmVec provides unsafe conversion methods:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"vec = WasmVec(UInt8[1, 2, 3])\n\n# Convert to pointer to the C struct\nstruct_ptr = Base.unsafe_convert(Ptr{wasm_byte_vec_t}, vec)\n\n# Convert to pointer to the data\ndata_ptr = Base.unsafe_convert(Ptr{UInt8}, vec)\n\n# Use with C functions\nsome_c_function(struct_ptr)","category":"page"},{"location":"21-generic-vectors/#Working-with-Pointers","page":"Generic Vector Wrapper (WasmVec)","title":"Working with Pointers","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"For vectors that contain pointers (most Wasmtime types), use WasmPtrVec:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Create vector of pointers\nptrs = [ptr1, ptr2, ptr3]  # Ptr{wasm_extern_t}\nextern_vec = WasmPtrVec(ptrs)\n\n# Or use type-specific aliases\nextern_vec = WasmExternVec(ptrs)","category":"page"},{"location":"21-generic-vectors/#Type-Safety","page":"Generic Vector Wrapper (WasmVec)","title":"Type Safety","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"The wrapper provides compile-time type safety:","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"vec = WasmVec(UInt8[1, 2, 3])\n\n# This will cause a compile error\nvec[1] = \"wrong type\"  # MethodError\n\n# Element types must match\nvec[1] = UInt8(42)  # ✓ Correct","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"Assignment and indexing operations ensure that the types are consistent with the underlying C vector type, preventing runtime errors. Meaning,","category":"page"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Element types must match\nvec[1] = UInt8(42)  # ✓ Correct\n\nvec[1] = Int32(42)  # ✓ Correct but will convert to UInt8\n\n# This will cause a compile error\nvec[1] = \"wrong type\"  # MethodError","category":"page"},{"location":"21-generic-vectors/#Examples","page":"Generic Vector Wrapper (WasmVec)","title":"Examples","text":"","category":"section"},{"location":"21-generic-vectors/#String-Handling","page":"Generic Vector Wrapper (WasmVec)","title":"String Handling","text":"","category":"section"},{"location":"21-generic-vectors/","page":"Generic Vector Wrapper (WasmVec)","title":"Generic Vector Wrapper (WasmVec)","text":"# Create a string as bytes\nhello = \"Hello, World!\"\nbytes = Vector{UInt8}(hello)\nname_vec = WasmName(bytes)\n\n# Use in Wasmtime functions\n# module_name = wasmtime_module_name(module, name_vec)\n\n# Convert back to string\nresult_string = String(collect(name_vec))","category":"page"},{"location":"90-contributing/#contributing","page":"Contributing guidelines","title":"Contributing guidelines","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"First of all, thanks for the interest!","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"We welcome all kinds of contribution, including, but not limited to code, documentation, examples, configuration, issue creating, etc.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"Be polite and respectful, and follow the code of conduct.","category":"page"},{"location":"90-contributing/#Bug-reports-and-discussions","page":"Contributing guidelines","title":"Bug reports and discussions","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you think you found a bug, feel free to open an issue. Focused suggestions and requests can also be opened as issues. Before opening a pull request, start an issue or a discussion on the topic, please.","category":"page"},{"location":"90-contributing/#Working-on-an-issue","page":"Contributing guidelines","title":"Working on an issue","text":"","category":"section"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If you found an issue that interests you, comment on that issue what your plans are. If the solution to the issue is clear, you can immediately create a pull request (see below). Otherwise, say what your proposed solution is and wait for a discussion around it.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"tip: Tip\nFeel free to ping us after a few days if there are no responses.","category":"page"},{"location":"90-contributing/","page":"Contributing guidelines","title":"Contributing guidelines","text":"If your solution involves code (or something that requires running the package locally), check the developer documentation. Otherwise, you can use the GitHub interface directly to create your pull request.","category":"page"},{"location":"81-conversions/#Conversion","page":"Conversion","title":"Conversion","text":"","category":"section"},{"location":"81-conversions/#Wat-to-Wasm","page":"Conversion","title":"Wat to Wasm","text":"","category":"section"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"The wat2wasm function converts WebAssembly Text Format (WAT) to WebAssembly binary format (WASM). This is useful for compiling WAT code into a format that can be executed by WebAssembly runtimes.","category":"page"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"using WasmtimeRuntime\n\nwat = \"\"\"\n(module\n  (func (export \"add\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add)\n  )\n\"\"\"\n\nwasm = wat2wasm(wat)","category":"page"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"For convenience, you can also use the @wat_str macro to convert a WAT string into a WASM binary format:","category":"page"},{"location":"81-conversions/","page":"Conversion","title":"Conversion","text":"using WasmtimeRuntime\n\nwasm_binary = @wat_str \"\"\"\n(module\n  (func (export \"add\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add)\n  )\n\"\"\"\n\n# or simply:\n\nwasm_binary = wat\"\"\"\n(module\n  (func (export \"add\") (param i32 i32) (result i32)\n    local.get 0\n    local.get 1\n    i32.add)\n  )\n\"\"\"","category":"page"},{"location":"#WasmtimeRuntime","page":"WasmtimeRuntime","title":"WasmtimeRuntime","text":"","category":"section"},{"location":"","page":"WasmtimeRuntime","title":"WasmtimeRuntime","text":"Documentation for WasmtimeRuntime.","category":"page"},{"location":"#Contributors","page":"WasmtimeRuntime","title":"Contributors","text":"","category":"section"},{"location":"","page":"WasmtimeRuntime","title":"WasmtimeRuntime","text":"<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n\n<!-- markdownlint-restore -->\n<!-- prettier-ignore-end -->\n\n<!-- ALL-CONTRIBUTORS-LIST:END -->","category":"page"}]
}
